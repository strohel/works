#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{epsfig}
\AtBeginDocument{\renewcommand{\ref}[1]{\mbox{\autoref{#1}}}}
\addto\extrasenglish{\renewcommand*{\equationautorefname}[1]{}}

\parskip=6pt   % mezera mezi odstavci
\end_preamble
\options 12pt
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Environment for Assimilation of Atmospheric Dispersion Models"
\pdf_author "MatÄ›j Laitl"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\rightmargin 2.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "diplomka-startpages.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Contents}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Notation}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Notation
\end_layout

\begin_layout Standard
[TODO: check for unused things] Following notation is used throughout this
 text:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="85text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{\mathbb{N}}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of natural numbers excluding zero
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{\mathbb{N}_{0}}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of natural numbers including zero
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{\mathbb{R}}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of real numbers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbb{R}_{0}^{+}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set of non-negative real numbers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{t}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
discrete time moment; 
\begin_inset Formula \ensuremath{t\in\mathbb{N}_{0}}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{a_{t}}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value of quantity 
\begin_inset Formula \ensuremath{a}

\end_inset

 at time 
\begin_inset Formula \ensuremath{t}

\end_inset

; 
\begin_inset Formula \ensuremath{a_{t}\in\mathbb{R}^{n},n\in\mathbb{N}}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathbf{s}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vector quantities are emphasized where it improves readability
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{a_{t:t'}}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sequence of quantities 
\begin_inset Formula \ensuremath{(a_{t},a_{t+1},\dotsc,a_{t'-1},a_{t'})}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{p(a_{t})}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
probability density function of quantity 
\begin_inset Formula \ensuremath{a}

\end_inset

 at time 
\begin_inset Formula \ensuremath{t;}

\end_inset

for the purpose of this text, probability density function 
\begin_inset Formula \ensuremath{p}

\end_inset

 is multivariate non-negative function 
\begin_inset Formula \ensuremath{\mathbb{R}^{n}\rightarrow\mathbb{R};\;\int_{\mathrm{supp\,}p}p(x_{1},x_{2},\dotsc,x_{n})\;\mathrm{d}x_{1}\mathrm{d}x_{2}\dotsb\mathrm{d}x_{n}=1}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{p(a_{t}|b_{t'})}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conditional probability density function of quantity 
\begin_inset Formula \ensuremath{a}

\end_inset

 at time 
\begin_inset Formula \ensuremath{t}

\end_inset

 given value of quantity 
\begin_inset Formula \ensuremath{b}

\end_inset

 at time 
\begin_inset Formula \ensuremath{t'}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{\delta(a)}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dirac delta function; used exclusively in context of probability density
 functions to denote discrete distribution within framework of continuous
 distributions, so that 
\begin_inset Formula \ensuremath{\int_{-\infty}^{\infty}f(x)\delta(x-\mu)\;\mathrm{d}x=f(\mu)}

\end_inset

 and more complex expressions can be derived using integral linearity and
 Fubini's theorem
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{\mathcal{N}(\mu,\Sigma)}

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multivariate normal (Gaussian) probability density function with mean vector
 
\begin_inset Formula \ensuremath{\mu}

\end_inset

 and covariance matrix 
\begin_inset Formula \ensuremath{\Sigma}

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $\ensuremath{\mathcal{N}(x;\mu,\Sigma)}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
random variable 
\begin_inset Formula $\left(x\right)$
\end_inset

 is explicitly mentioned along with distribution parameters 
\begin_inset Formula $\left(\mu,\Sigma\right)$
\end_inset

 where it is not clear from the context
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula \ensuremath{t\mathcal{N}\left(\mu,\sigma^{2},\left\langle a,b\right\rangle \right)}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
normal probability density function with original mean value 
\begin_inset Formula $\mu$
\end_inset

 and variance 
\begin_inset Formula $\sigma^{2}$
\end_inset

 truncated to interval 
\begin_inset Formula $\left\langle a,b\right\rangle $
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathcal{G}(k,\theta)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gamma probability density function with shape parameter 
\begin_inset Formula $k$
\end_inset

 and scale parameter 
\begin_inset Formula $\theta$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $i\mathcal{G}(\alpha,\beta)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inverse gamma probability density function with shape parameter 
\begin_inset Formula $\alpha$
\end_inset

 and scale parameter 
\begin_inset Formula $\beta$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Introduction}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Introduction
\end_layout

\begin_layout Standard
TODO: motivation, previous works, need for performance, results peek
\end_layout

\begin_layout Standard
TODO: Our goal is to estimate absorbed ionizing radiation doses at points
 of interest using available environmental measurements and to predict future
 development of the radioactive plume and related irradiation
\end_layout

\begin_layout Standard

\emph on
Chapter 1
\emph default
 presents a general mathematical apparatus that our solution is based on
 (the recursive Bayesian estimation) along with more specific method, particle
 filtering, that can be viewed as an application of the framework.
 Their inclusion in this text serves two purposes: completeness and forming
 a basis for the software design presented later, which happily borrows
 concepts from the underlying mathematics.
\end_layout

\begin_layout Standard

\emph on
Chapter 2
\emph default
 describes how the simulation of the atmospheric pollutant dispersion is
 modeled and how it can be measured for assimilation purposes.
 Later it constructs the task of assimilation using the mathematical language
 from chapter 1.
 It also devoted some space to presentation of a technique employed to optimize
 efficiency of particle filtering.
\end_layout

\begin_layout Standard

\emph on
Chapter 3
\emph default
 is devoted to software analysis.
 After discussion of requirements posed on desired software solution it
 summarizes available projects and frameworks and suggests how these can
 be combined.
 It continues by presentation of the implemented software project, its structure
 and rationale behind it.
\end_layout

\begin_layout Standard

\emph on
Chapter 4
\emph default
 is concerned with computational efficiency of the resulting software stack
 and describes methods used to improve it.
 It shows how the Cython Python-to-C compiler was used to eliminate interpreter
 and dynamic-typing overhead of Python.
 Large part of it presents the 
\emph on
Ceygen
\emph default
 project, a linear algebra library developed as part of this work.
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Chapter
Sequential Monte Carlo Methods
\begin_inset CommandInset label
LatexCommand label
name "chap:SequentialMC"

\end_inset


\end_layout

\begin_layout Standard
We are concerned with assimilation of radioactive pollutants as they disperse
 in the atmosphere; that is to give the best estimate of the pollutant distribut
ion in the environment and its progress in time, given a set of measurements
 with varying degree of accuracy.
 The problem is approached using the mathematical framework of recursive
 Bayesian estimation, which is briefly presented in the first section.
 This general problem statement and solution is then followed by description
 of a so-called Particle Filter,
\begin_inset Foot
status open

\begin_layout Plain Layout
also known as the Sequential Importance resampling (SIR) or Sequential Monte
 Carlo method
\end_layout

\end_inset

 a variant of which is employed to perform the assimilation.
 We also briefly discuss the Marginal Particle Filter, a derivate which
 is designed to counter some inherent problems of Bayesian particle filtering.
\end_layout

\begin_layout Section
Recursive Bayesian Estimation
\begin_inset CommandInset label
LatexCommand label
name "sec:Recursive-Bayesian-Estimation"

\end_inset


\end_layout

\begin_layout Standard
Recursive Bayesian estimation
\begin_inset Foot
status open

\begin_layout Plain Layout
also known as Bayesian filtering
\end_layout

\end_inset

 yields an estimate (in form of probability density functions) of a sequence
 of hidden state vectors 
\begin_inset Formula $x_{1:t}$
\end_inset

 at discrete time steps 
\begin_inset Formula $1:t$
\end_inset

 given sequence of available measurements (observations) 
\begin_inset Formula $y_{1:t}$
\end_inset

, known (or assumed) noisy state model 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysFt"

\end_inset

 and known (or assumed) noisy observation model 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysHt"

\end_inset

.
 State model 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysFt"

\end_inset

 describes how state evolves in time; more precisely it prescribes that
 state 
\begin_inset Formula $x$
\end_inset

 at time 
\begin_inset Formula $t$
\end_inset

, 
\begin_inset Formula $x_{t}$
\end_inset

, depends on previous state 
\begin_inset Formula $x_{t-1}$
\end_inset

 and random state noise 
\begin_inset Formula $v_{t-1}$
\end_inset

 (whose statistical properties need to be known) through the means of function
 
\begin_inset Formula $f_{t}$
\end_inset

, which often does not vary with time and is therefore labeled just 
\begin_inset Formula $f$
\end_inset

.
 Similarly, measurement model 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysHt"

\end_inset

 prescribes that visible measurements 
\begin_inset Formula $y$
\end_inset

 at time 
\begin_inset Formula $t$
\end_inset

, 
\begin_inset Formula $y_{t}$
\end_inset

, depend via function 
\begin_inset Formula $h_{t}$
\end_inset

 (often just time-independent 
\begin_inset Formula $h$
\end_inset

) on hidden state 
\begin_inset Formula $x_{t}$
\end_inset

 and random observation noise 
\begin_inset Formula $w_{t}$
\end_inset

, probability density function of which is likewise known.
 Summarizing this, we have
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
x_{t} & =f_{t}(x_{t-1},v_{t-1})\label{eq:DynSysFt}\\
y_{t} & =h_{t}(x_{t},w_{t}).\label{eq:DynSysHt}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
The Bayesian solution can now be derived.
 Both 
\begin_inset Formula $x_{t}\;(\forall t)$
\end_inset

 and 
\begin_inset Formula $y_{r}\;(\forall t)$
\end_inset

 are treated as (multivariate) random variables from now on.
 First, let us observe that the 
\emph on
state probability density function
\emph default
 
\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

 can be derived from 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysFt"

\end_inset

 and the 
\emph on
observation probability density function
\emph default
 
\begin_inset Formula $p(y_{t}|x_{t})$
\end_inset

 can be derived from 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysHt"

\end_inset

 likewise.
 So-called 
\emph on
prior
\emph default
 probability density function 
\begin_inset Formula $p(x_{t}|y_{1:t-1})$
\end_inset

 can be expressed using only known densities by applying reverse marginalization
 over 
\begin_inset Formula $x_{t-1}$
\end_inset

, applying chain rule for probability density functions and finally taking
 into account that 
\begin_inset Formula $x_{t}$
\end_inset

 doesn't depend on 
\begin_inset Formula $y_{t-1}$
\end_inset

 when already conditioned on 
\begin_inset Formula $x_{t-1}$
\end_inset

 (i.e.
 we assume Markov property) 
\begin_inset Formula 
\begin{align}
p(x_{t}|y_{1:t-1}) & =\int p(x_{t},x_{t-1}|y_{1:t-1})\;\mathrm{d}x_{t-1}\nonumber \\
p(x_{t}|y_{1:t-1}) & =\int p(x_{t}|x_{t-1},y_{1:t-1})p(x_{t-1}|y_{1:t-1})\;\mathrm{d}x_{t-1}\nonumber \\
p(x_{t}|y_{1:t-1}) & =\int p(x_{t}|x_{t-1})p(x_{t-1}|y_{1:t-1})\;\mathrm{d}x_{t-1}.\label{eq:PriorPdf}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
Next straightforward step in the solution is to derive 
\emph on
posterior
\emph default
 probability density function 
\begin_inset Formula $p(x_{t}|y_{1:t})$
\end_inset

, which is done by applying the Bayes' theorem and taking the fact that
 observation 
\begin_inset Formula $y_{t}$
\end_inset

 depends only on the newest state 
\begin_inset Formula $x_{t}$
\end_inset

 so that 
\begin_inset Formula $p(y_{t}|x_{t},y_{1:t-1})=p(y_{t}|x_{t})$
\end_inset


\begin_inset Formula 
\begin{align}
p(x_{t}|y_{1:t}) & =\frac{p(y_{t}|x_{t},y_{1:t-1})p(x_{t}|y_{1:t-1})}{p(y_{t}|y_{1:t-1})}\nonumber \\
p(x_{t}|y_{1:t}) & =\frac{p(y_{t}|x_{t})p(x_{t}|y_{1:t-1})}{p(y_{t}|y_{1:t-1})},\label{eq:PosteriorPdf}
\end{align}

\end_inset

where the denominator of 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PosteriorPdf"

\end_inset

 can be computed using marginalization over 
\begin_inset Formula $x_{t}$
\end_inset

 or not at all, because it doesn't depend on 
\begin_inset Formula $x_{t}$
\end_inset

 and serves only the purpose of a normalization constant.
 Formulas 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PriorPdf"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PosteriorPdf"

\end_inset

 together form the solution of the problem posed above.
\end_layout

\begin_layout Standard
On the other hand, this solution in its general form has only limited applicatio
n, because the integral 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PriorPdf"

\end_inset

, unless tractable analytically, constitutes a major computational challenge.
 The situation when the analytical solution is known is represented mainly
 by the famous Kalman filter
\begin_inset CommandInset citation
LatexCommand cite
key "Kalman:60"

\end_inset

 and its variants, which applies when state and observation models are linear
 and noises are normally distributed.
 If these models are highly non-linear (which is our case in radioactive
 release assimilation), one of the viable approaches is to resort to some
 kind of approximation of the solution.
 One such approximation is a particle filter described below.
\end_layout

\begin_layout Section
Particle Filter
\begin_inset CommandInset label
LatexCommand label
name "sec:Particle-Filter"

\end_inset


\end_layout

\begin_layout Standard
The idea of the particle filter
\begin_inset CommandInset citation
LatexCommand cite
key "Gordon:93"

\end_inset

 is to represent the approximation of its posterior probability density
 function using weighted empirical probability density function 
\begin_inset Formula 
\begin{equation}
p(x_{t}|y_{1:t})\approx\sum_{i=1}^{N}\omega_{t}^{(i)}\delta(x_{t}-x_{t}^{(i)}),\label{eq:PFPosterior}
\end{equation}

\end_inset

where 
\begin_inset Formula $N$
\end_inset

 is the total number of particles (an important parameter of the filter),
 
\begin_inset Formula $\omega_{t}^{(i)}$
\end_inset

 is the weight of the 
\begin_inset Formula $i$
\end_inset

-th particle at time 
\begin_inset Formula $t$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
constraint 
\begin_inset Formula $\sum_{i=1}^{N}\omega_{t}^{(i)}=1\quad\forall t$
\end_inset

 must hold
\end_layout

\end_inset

 and finally 
\begin_inset Formula $x_{t}^{(i)}$
\end_inset

 is the value of the 
\begin_inset Formula $i$
\end_inset

-th particle at time 
\begin_inset Formula $t$
\end_inset

, a hypothetical state the model could be in.
 The algorithm to recursively estimate posterior density is bootstrapped
 by i.i.d.
\begin_inset Foot
status open

\begin_layout Plain Layout
independently identically distributed
\end_layout

\end_inset

 sampling initial particles 
\begin_inset Formula $x_{0}^{(1:N)}$
\end_inset

 from a given 
\emph on
initial
\emph default
 probability density function 
\begin_inset Formula $p(x_{0})$
\end_inset

.
 When new observation 
\begin_inset Formula $y_{t}$
\end_inset

 is available, recursive update is performed as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:PF"

\end_inset

.
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DouFreGor:01"

\end_inset

 
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Enumerate
for each 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $\{1,\ldots,N\}$
\end_inset

 do:
\end_layout

\begin_deeper
\begin_layout Itemize
draw 
\begin_inset Formula $x_{t}^{(i)}$
\end_inset

 from the proposal density 
\begin_inset Formula $q(x_{t}|x_{t-1},y_{t})$
\end_inset

, where 
\begin_inset Formula $x_{t-1}$
\end_inset

 is substituted by 
\begin_inset Formula $x_{t-1}^{(i)}$
\end_inset

 and 
\begin_inset Formula $y_{t}$
\end_inset

 is the observation.
\end_layout

\begin_layout Itemize
update weight using 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PFweight"

\end_inset

 where 
\begin_inset Formula $x_{t-1}$
\end_inset

 is substituted by 
\begin_inset Formula $x_{t-1}^{(i)},\: x_{t}$
\end_inset

 is substituted by 
\begin_inset Formula $x_{t}^{(i)}$
\end_inset

 and 
\begin_inset Formula $y_{t}$
\end_inset

 is the observation,
\begin_inset Formula 
\begin{equation}
\tilde{\omega}_{t}^{(i)}:=\frac{p(y_{t}|x_{t})p(x_{t}|x_{t-1})}{q(x_{t}|x_{t-1},y_{t})}\omega_{t-1}^{(i)}.\label{eq:PFweight}
\end{equation}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
for each 
\begin_inset Formula $i$
\end_inset

 normalize weights according to 
\begin_inset Formula 
\[
\omega_{t}^{(i)}:=\frac{\tilde{\omega}_{t}^{(i)}}{\sum_{j=1}^{N}\tilde{\omega}_{t}^{(j)}}.
\]

\end_inset


\end_layout

\begin_layout Enumerate
resample 
\begin_inset Formula $x_{t}^{(1:N)}$
\end_inset

 from posterior probability density function 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:PFPosterior"

\end_inset

 eliminating low-weight particles, but maintaining posterior statistics.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:PF"

\end_inset

Recursive update of the particle filter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
First part of step 1.
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:PF"

\end_inset

 is usually called 
\emph on
prediction
\emph default
 as it foresees potential value of 
\begin_inset Formula $x_{t}^{(i)}$
\end_inset

 based on previous value 
\begin_inset Formula $x_{t-1}^{(i)}$
\end_inset

 and, in general case, observation 
\begin_inset Formula $y_{t}$
\end_inset

.
 Second part of step 1.
 performs 
\emph on
update
\emph default
 of the predicted posterior probability density function through the means
 of adjusting weight 
\begin_inset Formula $\omega_{t}^{(i)}$
\end_inset

 based on the actual observation and its probability density function 
\begin_inset Formula $p(y_{t}|x_{t})$
\end_inset

, taking into account likelihood of the prediction made by a so-called 
\emph on
proposal
\emph default
 density.
 --- Apart from probability density functions that come directly from the
 Bayesian filtering (the state density 
\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

 and observation density 
\begin_inset Formula $p(y_{t}|x_{t})$
\end_inset

), the algorithm makes use of the proposal density 
\begin_inset Formula $q(x_{t}|x_{t-1},y_{t})$
\end_inset

, which is an instrument to optimize the algorithm to a specific problem.
 The most straightforward choice of the proposal density (and the one originally
 described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Gordon:93"

\end_inset

) is directly the transition density 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

 (which is sometimes called the 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
naive
\emph default
 proposal
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
) that ignores the observation, which simplifies the weight calculation
 in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PFweight"

\end_inset

 to 
\begin_inset Formula $\omega_{t}^{(i)}:=p(y_{t}|x_{t})\omega_{t-1}^{(i)}.$
\end_inset

 Such algorithm is known as the 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
bootstrap filter
\emph default
.
 On the other hand, discarding observation 
\begin_inset Formula $y_{t}$
\end_inset

, possibly the source of most valuable information, can degrade the efficiency
 of the algorithm in a very severe way for certain systems.
 Our problem of atmospheric assimilation is an example of one such system
 as it is prohibitively computationally demanding without the help of carefully
 chosen proposal density.
\end_layout

\begin_layout Standard
The popularity of the particle filter may come from the fact that it is
 distinctively general and easy to apply to a wide range of Bayesian problems,
 regardless of analytical tractability of integrals that occur in generic
 solution: the only performed operations with involved densities is sampling
 from the proposal density and evaluation of the proposal, state and observation
 densities.
 However, this convenience comes with a cost.
 First and foremost, the particle filter is an approximate and stochastic
 method.
 While convergence to the optimal Bayesian solution 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PosteriorPdf"

\end_inset

 as 
\begin_inset Formula $N$
\end_inset

 approaches infinity is proven under a set of assumptions,
\begin_inset CommandInset citation
LatexCommand cite
key "CriDou:02"

\end_inset

 real-world applications must find a trade-off between accuracy (which improves
 as 
\begin_inset Formula $N$
\end_inset

 grows as with other Monte Carlo methods) and performance (where computation
 time linearly depends on 
\begin_inset Formula $N$
\end_inset

).
\end_layout

\begin_layout Standard
Another peculiarity of the particle filter is a 
\emph on
sample impoverishment
\emph default
 phenomenon.
 It is described as a tendency of the weights of all-but-one particle to
 drop to zero as time progresses (unless counter-measured), i.e.
 the variance of the weights tends to raise without bounds.
 Untreated, this property effectively degenerates the posterior density
 to a single Dirac delta function, making the filter anything but useful.
 Common approach to eliminate this is the resampling described in step 3.
 of the 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:PF"

\end_inset

.
 
\emph on
Number of effective particles
\emph default
 
\begin_inset Formula $N_{\mathrm{eff}}$
\end_inset

 is commonly used as a measure of the sample impoverishment and can be estimated
 using 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:PFNeff"

\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "DouFreGor:01"

\end_inset


\begin_inset Formula 
\begin{equation}
N_{\mathrm{eff}}(t)\approx\left(\sum_{i=1}^{N}\left(\omega_{t}^{(i)}\right)^{2}\right)^{-1},\qquad1\leq N_{\mathrm{eff}}\leq N.\label{eq:PFNeff}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $N_{\mathrm{eff}}$
\end_inset

 close to 
\begin_inset Formula $N$
\end_inset

 denotes near-uniform weight distribution while 
\begin_inset Formula $N_{\mathrm{eff}}$
\end_inset

 approaching 1 is a sign of the degenerate case.
 The resampling step mitigates some effects of the sample impoverishment,
 but if 
\begin_inset Formula $N_{\mathrm{eff}}\ll N$
\end_inset

, available resources are used ineffectively, as accuracy of the estimate
 is only improved by the 
\begin_inset Quotes eld
\end_inset

effective
\begin_inset Quotes erd
\end_inset

 particles, the rest serves as (to some extent inevitable) computational
 overhead.
 This problem is most pronounced when the proposal density doesn't match
 the resulting posterior density sufficiently (often being too broad) a
 condition often observed in the bootstrap filter.
 In accordance with literature, our tests have shown that careful choice
 of the proposal density can render sample impoverishment much more subtle
 problem.
\end_layout

\begin_layout Section
Marginal Particle Filter
\end_layout

\begin_layout Standard
Numerous techniques to address shortcomings of the particle filter have
 been described in literature, we have found it interesting to pick up the
 
\emph on
Marginal Particle Filter
\emph default
 proposed in 
\begin_inset CommandInset citation
LatexCommand cite
key "KlaFreDou:05"

\end_inset

.
 It is a modification of the particle filter where filtering is done directly
 on the marginal distribution 
\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

, more precisely on its estimate 
\begin_inset Formula $\sum_{i\text{=1}}^{N}\omega_{t-1}^{(i)}p(x_{t}|x_{t-1}^{(i)})$
\end_inset

.
 The authors suggest proposal probability density function in a similar
 form 
\begin_inset Formula $q(x_{t}|y_{1:t})=\sum_{i\text{=1}}^{N}\omega_{t-1}^{(i)}q(x_{t}|y_{t},x_{t-1}^{(i)})$
\end_inset

, where 
\begin_inset Formula $q(x_{t}|y_{t},x_{t-1}^{(i)})$
\end_inset

 would be the proposal density normally used in the original particle filter
 design.
 Along with adapted updating step, Marginal Particle Filter is characterized
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MPF"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Enumerate
for each 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $\{1,\ldots,N\}$
\end_inset

 do:
\end_layout

\begin_deeper
\begin_layout Itemize
draw 
\begin_inset Formula $x_{t}^{(i)}$
\end_inset

 from the modified proposal density 
\begin_inset Formula $\sum_{i\text{=1}}^{N}\omega_{t-1}^{(i)}q(x_{t}|y_{t},x_{t-1}^{(i)})$
\end_inset

 using stratified sampling, where 
\begin_inset Formula $y_{t}$
\end_inset

 is the observation.
\end_layout

\begin_layout Itemize
update weight using
\begin_inset Formula 
\[
\tilde{\omega}_{t}^{(i)}:=\frac{p(y_{t}|x_{t})\sum_{i\text{=1}}^{N}\omega_{t-1}^{(i)}p(x_{t}|x_{t-1}^{(i)})}{\sum_{i\text{=1}}^{N}\omega_{t-1}^{(i)}q(x_{t}|y_{t},x_{t-1}^{(i)})}.
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
for each 
\begin_inset Formula $i$
\end_inset

 normalize weights according to 
\begin_inset Formula 
\[
\omega_{t}^{(i)}:=\frac{\tilde{\omega}_{t}^{(i)}}{\sum_{j=1}^{N}\tilde{\omega}_{t}^{(j)}}.
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:MPF"

\end_inset

Recursive update of the Marginal Particle Filter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The authors argue that sampling from a more complete proposal density (that
 takes other weighted particles into account) effectively fights the sample
 impoverishment problem and relieves the need to perform the resampling
 step.
 These claims are supported by comparisons of the Marginal Particle Filter
 against its precursor on synthetic and real-world examples that indeed
 confirm improvement in 
\emph on
unique particle count
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
a measure similar to 
\size normal
\emph on
number of effective particles
\emph default
 used in this text
\end_layout

\end_inset

 and variance of the weights.
 Additionally it is shown (in the case of Auxiliary Marginal Particle Filter,
 an analogous extension of the auxiliary variable particle filter) that
 variance of the weights can be only less or equal than in non-marginal
 variant.
 It should be noted that when 
\emph on
naive
\emph default
 proposal is used, Marginal Particle Filter is equivalent to the traditional
 particle filter described above.
\end_layout

\begin_layout Standard
On the other hand, the presented method comes with its own drawback, which
 lies in 
\begin_inset Formula $O(N^{2})$
\end_inset

 algorithmic complexity
\begin_inset Foot
status open

\begin_layout Plain Layout
where 
\begin_inset Formula $N$
\end_inset

 is the total number of particles
\end_layout

\end_inset

 caused by the need to evaluate the proposal 
\begin_inset Formula $N$
\end_inset

 times 
\emph on
for each particle
\emph default
.
 This is a serious performance hit compared to 
\begin_inset Formula $O(N)$
\end_inset

 complexity of the traditional particle filter.
 Given that one can compensate unsuitably low number of effective particles
 simply by increasing 
\begin_inset Formula $N$
\end_inset

, any method that improves accuracy (which directly relates to the number
 of effective particles) at the cost of increased complexity of the algorithm
 must, in our opinion, prove that it brings an improvement even when this
 trade-off is taken into account.
 We suggest using 
\emph on
effective particles per second
\emph default
 (or per another unit of a limited resource) measure to give accurate notion
 of its usefulness.
 The authors of the Marginal Particle Filter suggest using approximate methods
 from N-body learning that can reduce the cost to 
\begin_inset Formula $O(N\, log(N))$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
or even to 
\begin_inset Formula $O(N)$
\end_inset

 when some favorable conditions are met
\end_layout

\end_inset

 and argue that additional error introduced by this approximation can be
 made insignificant with regards to inherent Monte Carlo error while still
 offering substantial performance improvement.
\end_layout

\begin_layout Standard
For some cases it is however advantageous to have the dependency on 
\begin_inset Formula $x_{t-1}$
\end_inset

 integrated out in sampling and weight update step, especially when the
 proposal density is complex.
 Such approach applied to atmospheric assimilation is studied in 
\begin_inset CommandInset citation
LatexCommand cite
key "SmiHof:13"

\end_inset

.
\end_layout

\begin_layout Standard
Marginal Particle Filter should not be confused with so-called 
\emph on
marginalized particle filter
\emph default
, a different technique more commonly known as the 
\emph on
Rao-Blackwell particle filter
\emph default
 that exploits cases when the transition density 
\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

 can be expressed as a (conditional) product of two or more participating
 densities, some of which can be estimated using using more tailored and
 efficient Bayesian filtering methods, e.g.
 using the Kalman filter.
\end_layout

\begin_layout Chapter
Dispersion Model Assimilation
\begin_inset CommandInset label
LatexCommand label
name "chap:DispersionModel"

\end_inset


\end_layout

\begin_layout Standard
This chapter formulates the mathematical model of physical phenomena we
 are concerned with and how it is applied to recursive Bayesian estimation.
 After summarizing the models, it continues by construction of assimilation
 methodology.
 State space with its transition density along with measurement model with
 its observation density are defined.
 It finished by derivation of proposal densities for the particle filtering
 methods tailored to this specific problem.
\end_layout

\begin_layout Standard
Unless noted otherwise, this whole chapter is based on 
\begin_inset CommandInset citation
LatexCommand cite
key "SmidlHofman:12"

\end_inset

.
\end_layout

\begin_layout Section
Atmospheric Dispersion Simulation
\end_layout

\begin_layout Standard
This section is concerned with the means of representing pollutant dispersion
 in atmosphere.
 We use a model based on a state-space representation presented in 
\begin_inset CommandInset citation
LatexCommand cite
key "Johannesson:05"

\end_inset

 with only slight modifications in order to perform the assimilation in
 the early phase of an atmospheric radioactive pollutant release from a
 facility that contains radioactive material.
\begin_inset Foot
status open

\begin_layout Plain Layout
we use a nuclear power plan TemelÃ­n as an example of such facility in this
 text
\end_layout

\end_inset

 The model assumes that so-called 
\emph on
puffs
\emph default
 containing varying levels of the pollutant are periodically released from
 an approximately known location within the facility.
 Such puffs are then carried by the wind and disperse according to atmospheric
 conditions; more specifically, the spatial concentration of the pollutant
 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:puff_conc"

\end_inset

, which is expressed in terms of total radioactive activity in our case,
 is assumed to be 3D Gaussian distributed around its center,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
C(\mathbf{s},\,\tau)=\frac{Q_{\tau}}{(2\pi)^{\frac{3}{2}}\sigma_{x}\sigma_{y}\sigma_{z}}\exp\left[-\frac{\left(s_{x}-l_{x,\tau}\right)}{2\sigma_{x}^{2}}^{2}-\frac{\left(s_{y}-l_{y,\tau}\right)^{2}}{2\sigma_{y}^{2}}-\frac{\left(s_{z}-l_{z,\tau}\right)^{2}}{2\sigma_{z}^{2}}\right],\label{eq:puff_conc}
\end{equation}

\end_inset

where 
\begin_inset Formula $\mathbf{s}=(s_{x},s_{y},s_{z})$
\end_inset

 denotes spatial coordinates where the concentration is to be determined,
 
\begin_inset Formula $\mathbf{l_{\mathbf{\tau}}}=(l_{x,\tau},l_{y,\tau},l_{z,\tau})$
\end_inset

 coordinates of the puff center at time 
\begin_inset Formula $\tau$
\end_inset

, 
\begin_inset Formula $Q_{\tau}$
\end_inset

 [Bq] total puff activity at given time.
 The dispersion manifests as growth of the 
\begin_inset Formula $\sigma$
\end_inset

 parameters.
 The rate of growth depends on total distance flown by the puff and on current
 Pasquill's stability category.
\begin_inset Foot
status open

\begin_layout Plain Layout
a meteorologic measure of atmospheric turbulence, an important factor affecting
 dispersion
\end_layout

\end_inset

 In case of radioactive release the total puff activity decreases over time
 by radioactive decay.
 The frequency of puff release must be carefully chosen, it must be high
 enough so that the effects of a series of puffs approximate effects of
 a contiguous plume well enough, but the higher the value the greater computatio
nal power is needed and, more importantly, release frequency greater than
 the one of important measuring devices would introduce harmful ambiguity
 and should be, in our belief, avoided.
 In our case, a radioactive monitoring network around the facility, the
 most critical source of the pollutant release rate information, measures
 time-integrated dose in 10-minute intervals, we therefore set release interval
 to 10 minutes in our experiments.
\end_layout

\begin_layout Standard
To summarize trajectory development of each puff, its coordinates 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\mathbf{l}_{t+1}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 at time step 
\begin_inset Formula $t+1$
\end_inset

 given previous coordinates 
\begin_inset Formula $\mathbf{l}_{t}$
\end_inset

 and wind field are given by
\begin_inset Formula 
\begin{align}
l_{x,t+1} & =l_{x,t}-\Delta t\,\dot{v}_{t}(\mathbf{l}_{t})\sin(\dot{\phi}_{t}(\mathbf{l}_{t})),\nonumber \\
l_{y,t+1} & =l_{y,t}-\Delta t\,\dot{v}_{t}(\mathbf{l}_{t})\cos(\dot{\phi}_{t}(\mathbf{l}_{t})),\label{eq:puff_l}\\
l_{z,t+1} & =l_{3,\kappa,t}\:,\nonumber 
\end{align}

\end_inset

where 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\dot{\phi}_{t}(\mathbf{s})$
\end_inset

 denotes given wind direction at time 
\begin_inset Formula $t$
\end_inset

 and spatial coordinates 
\begin_inset Formula $\mathbf{s}$
\end_inset

 and 
\begin_inset Formula $\dot{v}_{t}(\mathbf{s})$
\end_inset

 wind speed.
\end_layout

\begin_layout Standard
Note that this model can be considered too simplistic for a serious simulation,
 however this is much less a concern for assimilation, where real-world
 measurements constantly correct imperfections of the model.
 As this model is only one of the many practical ones, we aim to abstract
 out its details where feasible in software design so that it can be replaced
 without need to adapt other parts of the resulting software stack.
\end_layout

\begin_layout Section
Dose and Wind Field Measurements
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename vyzkumak-temelin-receptory.pdf
	lyxscale 50
	height 30pheight%
	BoundingBox 460bp 120bp 835bp 520bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Temelin"

\end_inset

TemelÃ­n power plant and adjacent monitoring network
\end_layout

\end_inset

Assumed source of release is marked by red circle, blue circles represent
 dose receptors.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As atmospheric activity concentration is not feasibly directly measurable,
 it needs to be observed indirectly using radioactive monitoring network,
 which in our scenario consists of 24 on-line absorbed ionizing dose sensors
 laid out in a circle around the facility plus additional such devices scattered
 in nearby villages.
 These receptors, which are marked using blue circles in the 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Temelin"

\end_inset

, periodically send out their readouts.
 Given spatial pollutant concentration from our model, the dose at given
 receptor location 
\begin_inset Formula $\mathbf{s}_{r}$
\end_inset

 can be calculated using
\begin_inset Formula 
\begin{equation}
D(\mathbf{s}_{r},t_{1},t_{2})=K_{c}\int_{t_{1}}^{t_{2}}\Phi(\mathbf{s}_{r},\tau)\:\mathrm{d}\tau,\label{eq:puff_dose}
\end{equation}

\end_inset

where 
\begin_inset Formula $K_{c}$
\end_inset

 is a physical constant depending on the radionuclide and 
\begin_inset Formula $\Phi(\mathbf{s}_{r},\tau)$
\end_inset

 fluency rate that can be computed using
\begin_inset Formula 
\begin{equation}
\Phi(\mathbf{s}_{r},\tau)=\int_{\Omega}\frac{C(\mathbf{s},\,\tau)\,(1+k\,\mu r)\exp(-\mu r)}{4\pi r^{2}}\:\mathrm{d}\mathbf{s}.\label{eq:fluency_rate}
\end{equation}

\end_inset

Here, 
\begin_inset Formula $k$
\end_inset

 and 
\begin_inset Formula $\mu$
\end_inset

 are physical constants, 
\begin_inset Formula $r=||\mathbf{s}_{r}-\mathbf{s}||$
\end_inset

 distance from receptor and 
\begin_inset Formula $\Omega$
\end_inset

 is the volume in which there is not-negligible concentration.
 Both dose and concentration from a series of puffs is additive.
 It should be noted that analytical solution of 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:fluency_rate"

\end_inset

 is not known and must be evaluated numerically and presents the most resource-d
emanding part of the model even if techniques to reduce problem size are
 employed.
\begin_inset Foot
status open

\begin_layout Plain Layout
in particular, we have employed approximation using Gauss quadratures
\begin_inset CommandInset citation
LatexCommand cite
key "GolWel:69"

\end_inset

 and a 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $n/\mu$
\end_inset


\begin_inset Quotes erd
\end_inset

 problem-reduction technique
\begin_inset CommandInset citation
LatexCommand cite
key "PechHof:11"

\end_inset

 when computing 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:fluency_rate"

\end_inset

 in our test runs
\end_layout

\end_inset

 Integral in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:puff_dose"

\end_inset

 is computed as a simple addition of the element of integration at chosen
 time sub-steps.
\end_layout

\begin_layout Standard
Meteorologic situation is another category of measurements.
 We assume that forecasts from a numerical model are available and denote
 wind speed and direction prognoses by 
\begin_inset Formula $\tilde{v}_{t}(\mathbf{s})$
\end_inset

 and 
\begin_inset Formula $\tilde{\phi}_{t}(\mathbf{s})$
\end_inset

 respectively, where 
\begin_inset Formula $t$
\end_inset

 and 
\begin_inset Formula $\mathbf{s}$
\end_inset

 have their usual meaning in this text of time and spatial coordinates.
 Inspired by real-world constraints, we assume that meteorologic forecasts
 are computed on a rather sparse grid both temporally and time-wise
\begin_inset Foot
status open

\begin_layout Plain Layout
in our tests we have used a source with 9
\begin_inset space ~
\end_inset

km spatial and 1
\begin_inset space ~
\end_inset

hour temporal grid step
\end_layout

\end_inset

 and, because we are concerned with an early phase of a pollutant release,
 that local wind field deviations in the vicinity of the facility are important,
 we take another observation into account: an anemometer located in the
 facility that measures wind speed, denoted as 
\begin_inset Formula $v_{t}(\mathbf{s})$
\end_inset

 in this text, and wind direction, denoted as 
\begin_inset Formula $\phi_{t}(\mathbf{s})$
\end_inset

.
\end_layout

\begin_layout Section
Assimilation: The State Model
\end_layout

\begin_layout Standard
With mathematical assimilation apparatus and physical models being set,
 last step is to combine them.
 This section formulates the assimilation of the atmospheric pollutant release
 in the terms of recursive Bayesian estimation, i.e.
 we construct the state variable 
\begin_inset Formula $\mathbf{x}_{t}$
\end_inset

 with its transition density 
\begin_inset Formula $p(\mathbf{x}_{t}|\mathbf{x}_{t-1})$
\end_inset

.
 In later sections the observation variable 
\begin_inset Formula $\mathbf{y}_{t}$
\end_inset

 along with observation density 
\begin_inset Formula $p(\mathbf{y}_{t}|\mathbf{x}_{t})$
\end_inset

 is build.
 Finally we also derive proposal densities for particle filter specific
 to our problem.
\end_layout

\begin_layout Subsection
Wind Field Corrections
\end_layout

\begin_layout Standard
A simple scheme seen in 
\begin_inset CommandInset citation
LatexCommand cite
key "HieKarDij:11"

\end_inset

 to combine local measurements with numerical forecast was employed, the
 corrected wind speed and direction 
\begin_inset Formula $\dot{v}_{t}(\mathbf{s})$
\end_inset

 and 
\begin_inset Formula $\dot{\phi}_{t}(\mathbf{s})$
\end_inset

 respectively are given by
\begin_inset Formula 
\begin{eqnarray}
\dot{v}_{t}(\mathbf{s}) & = & a_{t}\tilde{v}_{t}\left(\mathbf{s}\right),\label{eq:AsimV}\\
\dot{\phi}_{t}(\mathbf{s}) & = & b_{t}+\tilde{\phi}_{t}\left(\mathbf{s}\right),\label{eq:AsimPhi}
\end{eqnarray}

\end_inset

where 
\begin_inset Formula $a_{t}\in\mathbb{R}_{0}^{+}$
\end_inset

 and 
\begin_inset Formula $b_{t}\in\mathbb{R}$
\end_inset

 are biases (the former being relative, the latter additive) of the forecast,
 hidden artificial dimensionless random variables that are assimilated.
 All mentioned quantities are time-dependent.
 Both 
\begin_inset Formula $a_{t}$
\end_inset

 and 
\begin_inset Formula $b_{t}$
\end_inset

 random variables are expected to have mean value of their previous realization,
 i.e.
 
\begin_inset Formula $\mathrm{mean}(a_{t})=a_{t-1},\quad\mathrm{mean}(b_{t})=b_{t-1}$
\end_inset

, with 
\begin_inset Formula $a_{t}$
\end_inset

 having relative standard deviation 
\begin_inset Formula $\gamma_{a}$
\end_inset

 and 
\begin_inset Formula $b_{t}$
\end_inset

 having standard deviation of 
\begin_inset Formula $\sigma_{b}$
\end_inset

.
 Example conforming distributions with additional favorable properties could
 be
\begin_inset Formula 
\begin{eqnarray*}
p(a_{t}|a_{t-1}) & = & \mathcal{G}(\gamma_{a}^{-2},\gamma_{a}^{2}a_{t-1}),\\
p(b_{t}|b_{t-1}) & = & t\mathcal{N}\left(b_{t-1},\sigma_{b}^{2},\left\langle b_{t-1}-\pi,b_{t-1}+\pi\right\rangle \right).
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The favorable properties lie in availability of so-called conjugate priors
 (shown later in this text) in analytical forms for these probability density
 functions; truncated normal distribution chosen for 
\begin_inset Formula $b_{t}$
\end_inset

 is in fact only an approximation of formally more appropriate wrapped normal
 distribution.
 We argue that truncated normal distribution is a good approximation for
 practical choices of 
\begin_inset Formula $\sigma_{b}\leq\nicefrac{\pi}{6}$
\end_inset

; for significantly larger deviations a closer approximation in form of
 von Misses distribution could be employed.
\begin_inset Foot
status open

\begin_layout Plain Layout
although not effortlessly as this would invalidate our derivation of conjugate
 prior for 
\begin_inset Formula $b_{t}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Release Model
\end_layout

\begin_layout Standard
While many previous works assume temporally correlated release rate, where
 released pollutant quantity 
\begin_inset Formula $Q_{t}$
\end_inset

 depends on quantity 
\begin_inset Formula $Q_{t-1}$
\end_inset

 released in the previous step, we consider them to be uncorrelated.
 Among suitable probability density functions with non-negative support,
 Gamma distribution was used so that
\begin_inset Formula 
\begin{equation}
p(Q_{t}|Q_{t-1})=p(Q_{t})=\mathcal{G}\left(\alpha_{Q},\beta_{Q}\right),\label{eq:p_Q}
\end{equation}

\end_inset

where the choice of 
\begin_inset Formula $\alpha_{Q}=1$
\end_inset

 and 
\begin_inset Formula $\beta_{Q}\rightarrow0$
\end_inset

 serves the purpose of making this an uninformative prior, the one that
 assumes as little as possible about the system apart from objective constrains
 such as non-negativeness or continuousness.
 In our case this can be done without impacting the feasibility of the assimilat
ion because the measurements supply enough information.
\end_layout

\begin_layout Subsection
State Model Summary
\begin_inset CommandInset label
LatexCommand label
name "sub:State-Model-Summary"

\end_inset


\end_layout

\begin_layout Standard
To conclude construction of the state variable, we need to add the rest
 of quantities that fully represent the state of pollutant dispersion in
 the atmosphere --- the locations of individual puffs, their dispersion
 parameters and activities, hence
\begin_inset Formula 
\begin{equation}
\mathbf{x}_{t\,\mathrm{full}}=\left(a_{t},b_{t},Q_{t},\; Q_{1,t},\mathbf{l}_{1,t},d_{1,t},\boldsymbol{\sigma}_{1,t},\; Q_{2,t},\mathbf{l}_{2,t},d_{2,t},\boldsymbol{\sigma}_{2,t},\ldots,Q_{K,t},\mathbf{l}_{K,t},d_{K,t},\boldsymbol{\sigma}_{K,t}\right),\label{eq:x_t_full}
\end{equation}

\end_inset

where 
\begin_inset Formula $K$
\end_inset

 stands for total puff count and 
\begin_inset Formula $k^{\mathrm{th}}$
\end_inset

 puff at time 
\begin_inset Formula $t$
\end_inset

 is characterized by its activity 
\begin_inset Formula $Q_{k,t},$
\end_inset

 spatial coordinates 
\begin_inset Formula $\mathbf{l}_{k,t},$
\end_inset

 total flown distance 
\begin_inset Formula $d_{k,t}$
\end_inset

 and spatial dispersion coefficients 
\begin_inset Formula $\boldsymbol{\sigma}_{k,t}.$
\end_inset

 Under this formalism, the state space is extremely high-dimensional (for
 the purpose of Monte Carlo sampling) and its dimension grows without bounds
 in time as new puffs are released.
 Neither of these properties pose a real problem in practice, because
\end_layout

\begin_layout Enumerate
puffs can be discarded when certain criteria are met and their contribution
 to the environment is negligible, usually residual activity when radioactive
 decay is taken into account, distance from the area of interest and total
 dispersion can be considered; with this mechanism, no puffs are simulated
 under normal conditions where no pollutant release occurs in continuous
 monitoring scenario,
\end_layout

\begin_layout Enumerate
apart from the 
\begin_inset Formula $\left(a_{t},b_{t},Q_{t}\right)$
\end_inset

 triplet, all other quantities in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:x_t_full"

\end_inset

 are deterministic given the triplet, previous state and variables considered
 external such as wind field forecast and Pasquill's stability category.
 In particular, assuming puff number 
\begin_inset Formula $K$
\end_inset

 is to be released in time step 
\begin_inset Formula $t$
\end_inset

, its variables could be put as
\begin_inset Formula 
\begin{eqnarray*}
Q_{K,t} & = & Q_{t},\\
\mathbf{l}_{K,t} & \text{=} & \mathbf{l}_{\mathrm{facility}},\\
d_{K,t} & = & 0\\
\boldsymbol{\sigma}_{K,t} & = & \left(0,0,0\right),
\end{eqnarray*}

\end_inset

where 
\begin_inset Formula $\mathbf{l}_{\mathrm{facility}}$
\end_inset

 is expected location of the release within the facility.
 Similarly, location of an already flying puff (numbered 
\begin_inset Formula $k$
\end_inset

) is updated according to 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:puff_l"

\end_inset

 which in turn uses wind field 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:AsimV"

\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:AsimPhi"

\end_inset

 corrected using 
\begin_inset Formula $a_{t},$
\end_inset

 
\begin_inset Formula $b_{t};$
\end_inset

 activity, distance and dispersion coefficients are given by
\begin_inset Formula 
\begin{eqnarray*}
Q_{k,t} & = & e^{-\lambda\Delta t}Q_{k,t-1},\\
d_{k,t} & = & d_{k,t-1}+\left\Vert \mathbf{l}_{k,t}-\mathbf{l}_{k,t-1}\right\Vert ,\\
\boldsymbol{\sigma}_{k,t} & = & \boldsymbol{\sigma}(t-k,d_{k,t},\mathbf{l}_{k,t}),
\end{eqnarray*}

\end_inset

where 
\begin_inset Formula $\lambda$
\end_inset

 is exponential decay constant
\begin_inset Foot
status open

\begin_layout Plain Layout
given half-life 
\begin_inset Formula $t_{\nicefrac{1}{2}}$
\end_inset

 exponential decay constant is 
\begin_inset Formula $\lambda=\frac{t_{\nicefrac{1}{2}}}{\ln2}$
\end_inset


\end_layout

\end_inset

 of the radionuclide causing the pollution and 
\begin_inset Formula $\Delta t$
\end_inset

 time since the last step.
\end_layout

\begin_layout Standard
Given the deterministic property of large part of the full state, we can
 shrink the state space for the purposes of assimilation into 
\begin_inset Formula 
\begin{eqnarray*}
\mathbf{x}_{t} & = & (a_{t},b_{t},Q_{t})
\end{eqnarray*}

\end_inset

along with the transition density
\begin_inset Formula 
\begin{eqnarray*}
p(\mathbf{x}_{t}|\mathbf{x}_{t-1}) & = & p(Q_{t})p(a_{t}|a_{t-1})p(b_{t}|b_{t-1}),
\end{eqnarray*}

\end_inset

which makes this a more conceivable task for sequential Monte Carlo estimation.
\end_layout

\begin_layout Standard
Still, the full state needs to be accounted for when implementing actual
 representation of the model for assimilation or when strictly adhering
 to mathematical formalism.
 The rest of this text will usually omit deterministic part of the state
 vector for the sake of simplicity.
\end_layout

\begin_layout Section
Measurement Model
\begin_inset CommandInset label
LatexCommand label
name "sub:Measurement-Model"

\end_inset


\end_layout

\begin_layout Standard
Defining the observation vector 
\begin_inset Formula $\mathbf{y}_{t}$
\end_inset

 takes more straightforward path, as it is just a concatenation of available
 measurements, we may state that
\begin_inset Formula 
\[
\mathbf{y}_{t}=(v_{t},\phi_{t},y_{t,1},\ldots,y_{t,M}),
\]

\end_inset

where 
\begin_inset Formula $v_{t}$
\end_inset

 and 
\begin_inset Formula $\phi_{t}$
\end_inset

 are wind speed and wind direction anemometer measurements, 
\begin_inset Formula $M$
\end_inset

 total number of radioactive dose receptors and 
\begin_inset Formula $y_{t,k}$
\end_inset

 is total dose detected by the 
\begin_inset Formula $k^{\mathrm{th}}$
\end_inset

 receptor in time interval 
\begin_inset Formula $\left[t-1,t\right].$
\end_inset

 With state and observation quantities defined, probabilistic description
 of the observation model 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:DynSysHt"

\end_inset

 can be factored to conditionally independent densities and expressed as
 
\begin_inset Formula 
\begin{eqnarray}
p(v_{t},\phi_{t},y_{t,1},\ldots,y_{t,M}|a_{t},b_{t}) & = & p(v_{t}|a_{t})p(\phi_{t}|b_{t})p(y_{t,1},\ldots,y_{t,M}|a_{t},b_{t}).\label{eq:AsimObservationCPdf}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Subsection
Wind Field Measurement Model
\end_layout

\begin_layout Standard
We assume that anemometer velocity measurements have non-biased relative
 error, denoted as 
\begin_inset Formula $\gamma_{v}$
\end_inset

 in this text, therefore it can be modeled using a probability density function
 with non-negative support, mean value 
\begin_inset Formula $\dot{v}_{t}\left(\mathbf{s}_{0}\right)$
\end_inset

 and standard error 
\begin_inset Formula $\gamma_{v}\dot{v}_{t}\left(\mathbf{s}_{0}\right),$
\end_inset

 where 
\begin_inset Formula $\mathbf{s}_{0}$
\end_inset

 are spatial coordinates of the anemometer.
 For its favorable properties, we have used the inverse gamma distribution
 
\begin_inset Formula $i\mathcal{G}\left(\gamma_{v}^{-2}+2,(\gamma_{v}^{-2}+1)\dot{v}_{t}\left(\mathbf{s}_{0}\right)\right)$
\end_inset

 that fulfills these demands, hence, taking 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:AsimV"

\end_inset

 into account,
\begin_inset Formula 
\begin{equation}
p(v_{t}|a_{t})=i\mathcal{G}\left(\gamma_{v}^{-2}+2,(\gamma_{v}^{-2}+1)\dot{v}_{t}\left(\mathbf{s}_{0}\right)\right)=i\mathcal{G}\left(\gamma_{v}^{-2}+2,(\gamma_{v}^{-2}+1)a_{t}\tilde{v}_{t}\left(\mathbf{s}_{0}\right)\right).\label{eq:AsimVCpdf}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Wind direction was decided to be treated as an unbiased measurement with
 constant standard deviation 
\begin_inset Formula $\sigma_{\phi}.$
\end_inset

 The natural choice for for such situations being the normal density 
\begin_inset Formula $\mathcal{N}(\dot{\phi}_{t}\left(\mathbf{s}_{0}\right),\sigma_{\phi}^{2}),$
\end_inset

 substituting wind direction corrections 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:AsimPhi"

\end_inset

 we have
\begin_inset Formula 
\begin{equation}
p(\phi_{t}|b_{t})=\mathcal{N}(\dot{\phi}_{t}\left(\mathbf{s}_{0}\right),\sigma_{\phi}^{2})=\mathcal{N}(b_{t}+\tilde{\phi}_{t}\left(\mathbf{s}_{0}\right),\sigma_{\phi}^{2}).\label{eq:AsimThetaCPdf}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Dose Measurement Model
\end_layout

\begin_layout Standard
To derive measurement model for radioactive doses, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $p(y_{t,1},\ldots,y_{t,M}|a_{t},b_{t})$
\end_inset

 can be further factored into conditionally independent densities
\begin_inset Formula 
\begin{equation}
p(y_{t,1},\ldots,y_{t,M}|a_{t},b_{t})=\left(\prod_{i=1}^{M}p(y_{t,i}|d_{t,i})\right)p(d_{t,1},\ldots,d_{t,M}|a_{t},b_{t}),\label{eq:AsimYCPdf}
\end{equation}

\end_inset

where 
\begin_inset Formula $d_{t,i}$
\end_inset

 is expected dose measured on 
\begin_inset Formula $i$
\end_inset

-th receptor in time slot 
\begin_inset Formula $t$
\end_inset

 (including expected natural background dose 
\begin_inset Formula $y_{nb}$
\end_inset

).
 
\begin_inset Formula $p(d_{t,1},\ldots,d_{t,M}|a_{t}b_{t})$
\end_inset

 represents computation of the expected doses using formulas 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:puff_dose"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:fluency_rate"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:puff_conc"

\end_inset

, where puff trajectories develop according to corrected wind field model
 (this is where 
\begin_inset Formula $a_{t}$
\end_inset

 and 
\begin_inset Formula $b_{t}$
\end_inset

 enter the calculation).
 
\begin_inset Formula $p(d_{t,1},\ldots,d_{t,M}|a_{t}b_{t})$
\end_inset

 is therefore fully deterministic (i.e.
 Dirac delta distribution).
 Parameters of each of the 
\begin_inset Formula $p(y_{t,i}|d_{t,i})$
\end_inset

 correspond to possibilities of dose measuring devices, and according to
 
\begin_inset CommandInset citation
LatexCommand cite
key "Thompson:00"

\end_inset

 their error is proportional to the measured dose with constant of proportionali
ty 
\begin_inset Formula $\gamma_{y}$
\end_inset

 usually between 7--20%.
 Dose measurements were again simulated using inverse gamma distribution,
\begin_inset Formula 
\begin{equation}
\forall i\in1,\ldots,M\qquad p(y_{t,i}|d_{t,i})=i\mathcal{G}\left(\gamma_{y}^{-2}+2,(\gamma_{y}^{-2}+1)d_{t,i}\right).\label{eq:AsimDCPdf}
\end{equation}

\end_inset


\end_layout

\begin_layout Section
Problem-specific Proposal Density
\end_layout

\begin_layout Standard
The densities defined in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:State-Model-Summary"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Measurement-Model"

\end_inset

 fully describe a recursive Bayesian estimation problem.
 As however mentioned earlier, our task of environmental assimilation is
 a very demanding one for Monte Carlo estimation, mainly because our observation
 density is extremely narrow compared to transition density, which must
 be wide enough to account for rapid changes of weather or release rate.
 If we used the bootstrap variant of the particle filter directly, we would
 end up with overwhelming majority of particles being sampled into areas
 where whey would be assigned negligible likelihoods by the observation
 model.
 In other words, we would face severe case of the sample impoverishment
 problem.
\end_layout

\begin_layout Standard
It is therefore of great benefit to steer particle sampling into regions
 with better overlap with the observation density.
 This can be done by employing a better-suited proposal density 
\begin_inset Formula $q(\mathbf{x}_{t}|\mathbf{x}_{t-1},\mathbf{y}_{t})$
\end_inset

.
 As shown in 
\begin_inset CommandInset citation
LatexCommand cite
key "Lai:12"

\end_inset

 on a somewhat simpler problem with the same measurement model, it is undoubtedl
y advantageous to spend resources on generation of 
\begin_inset Quotes eld
\end_inset

better
\begin_inset Quotes erd
\end_inset

 particles than to simply increase the number of particles in the particle
 filter.
 Such claim does not hold universally for all uses of sequential Monte Carlo
 sampling, but holds in our case because analytically intractable time-spatial
 integration in the measurement model greatly overweights complexity introduced
 by more elaborate particle sampling.
\end_layout

\begin_layout Standard
We start construction of our proposal density by assuming conditional independen
ce of some variables (this assumption is an approximation, it is conceivable
 because of loose requirements posed on proposal density),
\begin_inset Formula 
\begin{eqnarray}
q(\mathbf{x}_{t}|\mathbf{x}_{t-1},\mathbf{y}_{t}) & = & p(a_{t},b_{t},Q_{t}|a_{t-1},b_{t-1},Q_{t-1},v_{t},\phi_{t},y_{t,1},\ldots,y_{t,M})\nonumber \\
 & \approx & p(Q_{t}|a_{t},b_{t},y_{t,1},\ldots,y_{t,M})p(a_{t}|a_{t-1},v_{t})p(b_{t}|b_{t-1},\phi_{t}).\label{eq:AsimApproxSDOptim}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
As can be seen, wind field variables are made conditional on the most informativ
e measurements --- wind direction correction 
\begin_inset Formula $b_{t}$
\end_inset

 depends on measured direction 
\begin_inset Formula $\phi_{t}$
\end_inset

 and speed correction 
\begin_inset Formula $a_{t}$
\end_inset

 likewise depends on observed velocity 
\begin_inset Formula $v_{t}$
\end_inset

.
 Released dose expectation takes receptor read-outs into account while simultane
ously coping with proposed wind field.
 Forms of individual proposal factors are derived below for completeness.
\end_layout

\begin_layout Subsection
Wind Direction Conjugate Proposal Density
\end_layout

\begin_layout Standard
For the choice of wind direction transition density 
\begin_inset Formula $p(b_{t}|b_{t-1})=\mathcal{N}(b_{t};b_{t-1},\sigma_{b})$
\end_inset

 and wind direction observation density 
\begin_inset Formula $p(\phi_{t}|b_{t})=\mathcal{N}(\phi_{t};\tilde{\phi}_{t}+b_{t},\sigma_{\theta})$
\end_inset

, the conjugate proposal can be derived as follows:
\begin_inset Formula 
\begin{align}
p(b_{t}|b_{t-1},\phi_{t}) & =\frac{p(\phi_{t}|b_{t},b_{t-1})p(b_{t}|b_{t-1})}{p(\phi_{t}|b_{t-1})}\label{eq:BBayesConjugate}\\
 & =\frac{\mathcal{N}(\phi_{t};\tilde{\phi}_{t}+b_{t},\sigma_{\theta})\mathcal{N}(b_{t};b_{t-1},\sigma_{b})}{p(\phi_{t}|b_{t-1})}\nonumber \\
 & =\frac{1}{p(\phi_{t}|b_{t-1})}\frac{1}{2\pi}\frac{1}{\sigma_{\theta}}\exp\left(-\frac{1}{2}\left(\frac{\phi_{t}-\tilde{\phi}_{t}-b_{t}}{\sigma_{\theta}}\right)^{2}\right)\frac{1}{\sigma_{b}}\exp\left(-\frac{1}{2}\left(\frac{b_{t}-b_{t-1}}{\sigma_{b}}\right)^{2}\right)\nonumber \\
 & =\mathcal{N}\left(\left(\sigma_{b}^{-2}+\sigma_{\phi}^{-2}\right){}^{-1}\left(\sigma_{b}^{-2}b_{t-1}+\sigma_{\phi}^{-2}\left(\phi_{t}-\tilde{\phi}_{t}\right)\right),\left(\sigma_{b}^{-2}+\sigma_{\phi}^{-2}\right){}^{-1}\right).\label{eq:NormalConjugate}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
Note that 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:BBayesConjugate"

\end_inset

 is obtained by applying Bayes rule and that 
\begin_inset Formula $p(\phi_{t}|b_{t-1})$
\end_inset

 does not have to be computed at all because it serves as a normalizing
 constant in a distribution with well-known (Gaussian) form.
 
\begin_inset Formula $\tilde{\phi}_{t}$
\end_inset

 was used instead of 
\begin_inset Formula $\tilde{\phi}_{t}\left(\mathbf{s}_{0}\right)$
\end_inset

 to denote wind direction forecast at time 
\begin_inset Formula $t$
\end_inset

 and location of the anemometer for brevity.
\end_layout

\begin_layout Subsection
Wind Speed Conjugate Proposal Density
\end_layout

\begin_layout Standard
In order to derive formula for 
\begin_inset Formula $p(a_{t}|a_{t-1},v_{t}),$
\end_inset

 let us first show general (and well known) result for for inverse gamma
 density and gamma density pair with appropriate parametrization.
 Suppose that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $p(y|a)=i\mathcal{G}\left(y;\alpha,\left(\alpha-1\right)a\right)$
\end_inset

, 
\begin_inset Formula $p(a)=\mathcal{G}(a;k,\theta)$
\end_inset

 and that 
\begin_inset Formula $y$
\end_inset

 is known.
 Then 
\begin_inset Formula $p(a|y)$
\end_inset

 is also a gamma distribution and can be again obtained using the Bayes
 rule 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:BayesConjugate"

\end_inset

, yielding 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:GammaConjugate"

\end_inset

.
 The transition from 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:GammaPreConjugate"

\end_inset

 to 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:GammaConjugate"

\end_inset

 makes use of the fact that the whole term in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:GammaPreConjugate"

\end_inset

 is a probability density function, therefore it must integrate to 1; however,
 the non-constant parts (with regards to quantity 
\begin_inset Formula $a$
\end_inset

) have the form of the gamma distribution, therefore the whole term must
 necessarily be a gamma distribution itself
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
p(a|y) & =\frac{p(y|a)p(a)}{p(y)}\label{eq:BayesConjugate}\\
 & =\frac{1}{p(y)}i\mathcal{G}\left(y;\alpha,\left(\alpha-1\right)a\right)\mathcal{G}(a;k,\theta)\nonumber \\
 & =\frac{1}{p(y)}\frac{\left(\left(\alpha-1\right)a\right)^{\alpha}}{\Gamma\left(\alpha\right)}y^{-\alpha-1}\exp\left(-\frac{\left(\alpha-1\right)a}{y}\right)\frac{1}{\theta^{k}\Gamma\left(k\right)}a^{k-1}\exp\left(-\frac{a}{\theta}\right)\nonumber \\
 & =\frac{\left(\alpha-1\right)^{\alpha}y^{-\alpha-1}}{p(y)\Gamma\left(\alpha\right)\theta^{k}\Gamma\left(k\right)}a^{\alpha+k-1}\exp\left(-a\left(\left(\alpha-1\right)y^{-1}+\theta^{-1}\right)\right)\nonumber \\
 & =C\left(y,\alpha,\theta,k\right)a^{\alpha+k-1}\exp\left(-a\left(\left(\alpha-1\right)y^{-1}+\theta^{-1}\right)\right)\label{eq:GammaPreConjugate}\\
 & =\mathcal{G}\left(a;\alpha+k,\left(\left(\alpha-1\right)y^{-1}+\theta^{-1}\right)^{-1}\right).\label{eq:GammaConjugate}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
In our case (again with 
\begin_inset Formula $\tilde{v}_{t}\left(\mathbf{s}_{0}\right)$
\end_inset

 forecast being denoted simply as 
\begin_inset Formula $\tilde{v}_{t}$
\end_inset

): 
\begin_inset Formula 
\begin{align*}
a & =a_{t}\tilde{v}_{t}\\
y & =v_{t}\\
p(y|a) & =p(v_{t}|a_{t}\tilde{v}_{t})\\
 & =i\mathcal{G}\left(v_{t};\gamma_{v}^{-2}+2,(\gamma_{v}^{-2}+1)a_{t}\tilde{v}_{t}\right)\\
p(a) & =p(a_{t}\tilde{v}_{t}|a_{t-1})\\
 & =\mathcal{G}(a_{t}\tilde{v}_{t};\gamma_{a}^{-2},\gamma_{a}^{2}a_{t-1}\tilde{v}_{t})\\
p(a|y) & =p(a_{t}\tilde{v}_{t}|a_{t-1},v_{t})\\
 & =\mathcal{G}\left(a_{t}\tilde{v}_{t};\gamma_{v}^{-2}+\gamma_{a}^{-2}+2,\left(\left(\gamma_{v}^{-2}+1\right)v_{t}^{-1}+\gamma_{a}^{-2}a_{t-1}^{-1}\tilde{v}_{t}^{-1}\right)^{-1}\right)\\
p(a_{t}|a_{t-1},v_{t}) & =\mathcal{G}\left(a_{t};\gamma_{v}^{-2}+\gamma_{a}^{-2}+2,\left(\left(\gamma_{v}^{-2}+1\right)v_{t}^{-1}\tilde{v}_{t}+\gamma_{a}^{-2}a_{t-1}^{-1}\right)^{-1}\right).
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection
Released Dose Proposal Density
\end_layout

\begin_layout Standard
Derivation of the approximation of the proposal factor 
\begin_inset Formula $p(Q_{t}|a_{t},b_{t},y_{t,1},\ldots,y_{t,M})$
\end_inset

 is less straightforward.
 Let us reformulate the
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 
\begin_inset Formula $\prod_{i=1}^{M}p(y_{t,i}|d_{t,i})$
\end_inset

 part of dose measurement density 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:AsimYCPdf"

\end_inset

.
 We
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 extract activity
\begin_inset Foot
status open

\begin_layout Plain Layout
this is possible because 
\begin_inset Formula $\forall i\; d_{t,i}$
\end_inset

 depends on linear combination of puff activities
\end_layout

\end_inset

 of the just released puff 
\begin_inset Formula $Q{}_{t}$
\end_inset

 (marked simply as 
\begin_inset Formula $Q$
\end_inset

 in this subsection for simplicity) from expected doses 
\begin_inset Formula $d_{t,i}$
\end_inset

 and fix other parameters (such as activities of other puffs and wind field)
 so that
\begin_inset Formula 
\begin{eqnarray}
\prod_{i=1}^{M}p(y_{t,i}|d_{t,i}) & = & \prod_{i=1}^{M}i\mathcal{G}\left(\gamma_{y}^{-2}+2,(\gamma_{y}^{-2}+1)d_{t,i}\right)=\nonumber \\
=p(y_{t,1},\ldots,y_{t,M}|Q) & = & \prod_{i=1}^{M}i\mathcal{G}\left(\alpha_{i},\beta_{i}Q+m_{i}\right).\label{eq:p_y_Q_proposal}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Applying Bayes rule to 
\begin_inset Formula $p(Q_{t}|a_{t},b_{t},y_{t,1},\ldots,y_{t,M})$
\end_inset

 and fixing 
\begin_inset Formula $a_{t},$
\end_inset

 
\begin_inset Formula $b_{t}$
\end_inset

 parameters we get
\begin_inset Formula 
\begin{align}
p(Q|y_{t,1:M}) & =\frac{p(y_{t,1:M}|Q)p(Q)}{p(y_{t,1:M})}\nonumber \\
 & \propto Q^{\alpha_{Q}-1}\exp\left(-\beta_{Q}Q\right)\prod_{i=1}^{M}(\beta_{i}Q+m_{i})^{\alpha_{i}}y_{t,i}^{-\alpha_{i}-1}\exp\left(-\frac{\beta_{i}Q+m_{i}}{y_{t,i}}\right),\label{eq:p_y_Q_explicit}
\end{align}

\end_inset

where we have substituted from 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:p_y_Q_proposal"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:p_Q"

\end_inset

.
 Since this density has no standard known form, the normalization factor
 cannot be inferred analytically, as it was done above.
 We can approximate it using normal distribution
\begin_inset Formula 
\begin{equation}
p(Q|y_{t,1:M})\approx\mathcal{N}(\mu_{Q},\sigma_{Q}^{2}),\label{eq:p_Q_y_proposal_approx}
\end{equation}

\end_inset

whose parameters are obtained using Laplace's method.
\begin_inset CommandInset citation
LatexCommand cite
key "KasRaf:95"

\end_inset

 Its mean 
\begin_inset Formula $\mu_{Q}$
\end_inset

 is aligned with local maxima, denoted as 
\begin_inset Formula $\hat{Q}$
\end_inset

, of 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:p_y_Q_explicit"

\end_inset

, which is obtained by computing derivative of its logarithm
\begin_inset Formula 
\begin{align}
\frac{d\log(p(Q|y_{t,1:M}))}{dQ} & =\frac{d}{dQ}\left(\sum_{i=1}^{M}\left[\alpha_{i}\log(\beta_{i}Q+m_{i})-\frac{\beta_{i}Q+m_{i}}{y_{t,i}}\right]+(\alpha_{Q}-1)\log Q-\beta_{Q}Q\right)\nonumber \\
 & =\sum_{i=1}^{M}\left[\frac{\alpha_{i}\beta_{i}}{\beta_{i}Q+m_{i}}-\frac{\beta_{i}}{y_{t,i}}\right]+\frac{\alpha_{Q}-1}{Q}-\beta_{Q},\label{eq:ig-d-log}
\end{align}

\end_inset

which yields a sum of decreasing rational functions, allowing us to find
 the only possible zero crossing using efficient numerical methods.
 Second derivative of 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:ig-d-log"

\end_inset

 is then computed and made equal to inverse covariance matrix of the approximate
d normal distribution 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:p_Q_y_proposal_approx"

\end_inset

 at point of its maxima,
\begin_inset Formula 
\[
\frac{1}{2}\sigma_{Q}^{-2}=\sum_{i=1}^{M}\left[\frac{\alpha_{i}\beta_{i}^{2}}{(\beta_{i}\hat{Q}+m_{i})^{2}}\right]+\frac{\alpha_{Q}-1}{\hat{Q}^{2}}.
\]

\end_inset


\end_layout

\begin_layout Standard
As negative released activity is nonsensical, the activity proposal approximatio
n 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:p_Q_y_proposal_approx"

\end_inset

 is truncated to 
\begin_inset Formula $\mathbb{R}_{0}^{+}$
\end_inset

 before it is sampled from.
\end_layout

\begin_layout Chapter
Software Analysis
\end_layout

\begin_layout Standard
This chapter is devoted to analysis of suitable software solution for performing
 assimilation of atmospheric dispersion models such as the one presented
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:DispersionModel"

\end_inset

 using (a variant of) sequential Monte Carlo methods described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SequentialMC"

\end_inset

.
 Requirements posed on such solution (including foreseen use cases) are
 discussed first so that we can consult them when making software design
 decisions.
 The chapter continues by overview of existing projects that were deemed
 useful as building blocks of the desired software stack; the Python software
 environment enhanced by Cython Python-to-C compiler is described.
 What follows is actual software analysis, where object-oriented structure
 of individual components along with their interaction with external and
 internal parts is presented and justified.
 A project called 
\noun on
asim
\noun default
 was implemented according to the analysis, so this chapter also describes
 the actual implementation.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
We are concerned with designing and developing software stack to perform
 assimilation according to theoretical chapters above.
 Intended uses of such stack include (but are not limited to):
\end_layout

\begin_layout Description
Research
\begin_inset space ~
\end_inset

platform The 
\noun on
asim
\noun default
 project, when paired with suggested components, should form a solid environment
 for rapid prototyping and validating new variants of assimilation methods
 and/or dispersion models.
 This has implications on the used development language and development
 iteration time, which needs to be rather low.
\end_layout

\begin_layout Description
Continuous
\begin_inset space ~
\end_inset

monitoring
\begin_inset space ~
\end_inset

tool The desired software should allow to be adapted to serve as a computational
 back-end for hypothetical tool dedicated to continuous monitoring of pollutant
 releases; such tool would form additional information source for decision-maker
s in the early phase of a radioactive release accident.
\end_layout

\begin_layout Description
Distributed
\begin_inset space ~
\end_inset

system
\begin_inset space ~
\end_inset

worker It is desired for 
\noun on
asim
\noun default
 to be usable as a worker in a distributed web-based assimilation simulation
 system, which is currently being developed.
 The user interface allowing to specify simulation parameters runs in a
 web server, which in turn distributes the work to computing nodes.
\end_layout

\begin_layout Standard
With these use-cases in mind, we can infer general requirements on the desired
 solution:
\end_layout

\begin_layout Description
High-Level
\begin_inset space ~
\end_inset

Language The need for ability to rapidly prototype new variants of assimilation
 and environmental modeling methods calls for use of a high-productivity
 programming language.
 Such language should be easy to learn or well-known so that is is attractive
 also for researchers without firm programing background.
\end_layout

\begin_layout Description
Extensibility While we implement methods as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SequentialMC"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:DispersionModel"

\end_inset

 (with some insignificant details being omitted the the theoretical chapters
 for clarity), the software should expect that improvements to the methodology
 will arise and should allow them to be incorporated.
 It should allow to use implemented assimilation methods with a different
 suitable dispersion model, allow user to plug in custom weather forecast
 source etc.
\end_layout

\begin_layout Description
Documentation Up-to-date, complete and readable API
\begin_inset Foot
status open

\begin_layout Plain Layout
Application Programming Interface, a set of rules defining how a software
 library is used
\end_layout

\end_inset

 documentation is needed so that the software can be used and enhanced by
 anyone, not just its author.
 Such documentation can assume that users already have mathematical understandin
g of the problem.
\end_layout

\begin_layout Description
Efficiency Uses such as continuous monitoring or batch processing in distributed
 system dictate for high performance given available hardware resources.
 Inherent property of Monte Carlo methods is that additional resources can
 be converted to more samples, which in turn increases accuracy.
 More efficient computation therefore means ability to achieve better justified
 results, therefore efficiency should be high on the requirements list.
\end_layout

\begin_layout Description
Interoperability The desired software stack should allow for effortless
 cooperation with supportive software.
 This includes for example data visualization utilities or tools that prepare
 inputs.
 Well-known or standardized formats should be used for data exchange.
\end_layout

\begin_layout Description
Portability The software should build and run on major server and desktop
 platforms: GNU/Linux (compatibility with other UNIX-like systems being
 a plus) and Microsoft Windows.
 Installation of the library on modern systems should be straightforward,
 no non-standard components should be required.
\end_layout

\begin_layout Description
Openness Self-contained and reusable parts of the software solution should
 be released to public under open-source license.
 The authors believe that this approach leads to highest-quality software
 in the long run.
 This requirement is not applied to problem-specific parts of the software
 stack if they are not considered reusable.
\end_layout

\begin_layout Standard
It should be noted that many of the demands are in direct conflict with
 each other, the most prominent example being high programmer productivity
 and computational efficiency (to be achieved at the same time).
 The task of following analysis is to find reasonable trade-off between
 these conflicting requirements or to propose innovative solutions that
 remove the conflict to some extent.
\end_layout

\begin_layout Standard
Because of significant overlap with demands described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Laitl11"

\end_inset

, we will reuse programming language feasibility analysis performed there
 for the PyBayes library.
 The authors chose Python as the preferred implementation environment.
 The rationale is its developer convenience, readability of code, interoperabili
ty with C and MATLAB, availability of 3rd party topical software and dynamic
 and interpreted nature.
 It was shown that Cython compiler can mask the only significant draw-back
 of Python, which is poor performance of CPU-intensive code.
 This implementation environment is presented in the next section.
\end_layout

\begin_layout Section
Foundations
\end_layout

\begin_layout Standard
The desired software is not built on a green field, we base it on existing
 environments and projects to form a complete and usable stack.
 This section presents these projects so that proper design of their interaction
 can be developed later on.
 We ascend from the lower-level parts, the Python language and software
 ecosystem surrounding it, the Cython compiler, the newly incorporated project
 --- Eigen (a C++ template library for linear algebra), to the employed
 library for Bayesian filtering, PyBayes.
\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Standard
Python
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.python.org/
\end_layout

\end_inset


\end_layout

\end_inset

 is a very high-level language actively developed by the community of volunteers
 and professionals centered around the Python Software Foundation.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.python.org/psf/
\end_layout

\end_inset


\end_layout

\end_inset

 Python encourages object-oriented programming paradigm, incorporates many
 concepts of functional programming and is quick to adopt emerging constructs.
 It is strongly but dynamically-typed
\begin_inset Foot
status open

\begin_layout Plain Layout
types are bound to values, not variables; one variable can assume multiple
 non-covariant types during its lifetime
\end_layout

\end_inset

 with call-by-object
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://effbot.org/zone/call-by-object.htm
\end_layout

\end_inset


\end_layout

\end_inset

 function argument passing and assignment semantics
\begin_inset Foot
status open

\begin_layout Plain Layout
objects are referenced, rather than copied, when passed around and assignments
 in nested scope are invisible to parent scope
\end_layout

\end_inset

 and immutable basic types such as numbers and strings.
 Python provides automatic memory management, which is done through reference
 counting in its reference implementation (other implementations are free
 to implement it differently).
\end_layout

\begin_layout Subsubsection
Implementations
\end_layout

\begin_layout Standard
The name Python may refer to the language, its standard library which is
 part of it, or even the principal implementation, CPython.
 While many implementations exist, for example Jython,
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.jython.org/
\end_layout

\end_inset


\end_layout

\end_inset

 IronPython
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://ironpython.net/
\end_layout

\end_inset


\end_layout

\end_inset

 (that are based on Java and .NET runtime environments, respectively) and
 promising just-in-time compiling PyPy,
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pypy.org/
\end_layout

\end_inset


\end_layout

\end_inset

 CPython is shipped with the standard Python installation as is by far the
 most used.
 It is written in C and provides a relatively stable C API that exposes
 its internals.
 This API is exploited by Cython described below.
\end_layout

\begin_layout Subsubsection
Versions
\end_layout

\begin_layout Standard
Python (the language) comes in two major versions, 2 and 3.
 Python 2 is considered legacy, its specification is frozen and the CPython
 implementation only receives bug fixes.
 Python 3, which introduces a couple of backward-incompatible changes to
 the language and standard library, is the current and promoted version.
 Still, many useful Python projects have not yet finished their Python 3
 port, so Python 2 is, at the time of writing, the version with widest palette
 of 3rd party components available.
 Methods for almost automatic conversion between the 2 versions of source
 code exist: 2to3, 3to2 tools and even Cython can be used as such.
 We propose developing in the latest revision of the Python 2 language for
 greatest compatibility while simultaneously avoiding deprecated functionality
 (which improves accuracy of the automated conversion tools).
\end_layout

\begin_layout Subsubsection
Software Ecosystem
\end_layout

\begin_layout Standard

\emph on
NumPy
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.numpy.org/
\end_layout

\end_inset


\end_layout

\end_inset

 is the de facto standard Python library for numerical computing.
 It provides a powerful n-dimensional array data-type, the 
\family typewriter
ndarray
\family default
, and a wide range of algebraic operations on top of it.
 
\family typewriter
ndarray
\family default
 forms the compatibility bridge between nearly all Python libraries related
 to numerical computing.
\end_layout

\begin_layout Standard
The 
\emph on
SciPy library
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.scipy.org/
\end_layout

\end_inset


\end_layout

\end_inset

 provides more specialized scientific computing methods not found in NumPy
 and is in fact just one part of the SciPy ecosystem, which contains 
\emph on
Matplotlib
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://matplotlib.org/
\end_layout

\end_inset


\end_layout

\end_inset

 for data visualization and other projects for symbolic computing, interactive
 development and so.
 All these projects are published under permissive open-source licenses
 and thus freely usable and modifiable.
\end_layout

\begin_layout Subsubsection
Drawbacks
\end_layout

\begin_layout Standard
Using Python (without additional measures) comes however with some drawbacks.
 First and foremost, it incurs significant interpreter and dynamic typing
 overhead.
 About 60-fold speed improvements were observed when this overhead was removed
 using Cython on a simple numerical integration example.
\begin_inset CommandInset citation
LatexCommand cite
key "Laitl11"

\end_inset

 Such massive overhead is not compatible with our requirement of computing
 efficiency and must be avoided in the desired software.
 This conclusion aligns with a general agreement in the literature that
 Python alone is not suitable for numerically intensive computations.
\begin_inset CommandInset citation
LatexCommand cite
key "Sel:09,CaiLanMoe:05"

\end_inset


\end_layout

\begin_layout Standard
Another problematic area is thread-based parallelization.
 While Python supports many approaches to writing multi-threaded code, CPU-bound
 computations written for multiple threads (but a single process) in pure
 Python seldom make us of all available CPU cores because of the so-called
 GIL, the Global Interpreter Lock.
 Each CPython interpreter thread by default holds this lock and releases
 it only explicitly for some I/O operations.
 This results in just one thread (per each CPython interpreter process)
 running at given time, i.e.
 completely circumventing parallelization.
 Methods combating this limitation exist, for example the 
\family typewriter
multiprocessing
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.python.org/library/multiprocessing.html
\end_layout

\end_inset


\end_layout

\end_inset

 module or Cython-based GIL releasing.
\end_layout

\begin_layout Subsection
Cython
\end_layout

\begin_layout Standard
Cython
\begin_inset CommandInset citation
LatexCommand cite
key "BehBraCitDalSelSmi:11"

\end_inset

 was employed to counter performance problems of pure Python-based solutions
 when developing PyBayes and it proved extremely useful for this purpose.
 We present it briefly in this section, concentrating on recent developments
 not yet available when PyBayes was conceived.
\end_layout

\begin_layout Standard
Cython is both an extension of the Python language (a strict superset of
 it) and its implementation.
 Its mode of operation is to translate Python source code (
\family typewriter
.py
\family default
 Python or 
\family typewriter
.pyx
\family default
 Cython files) into C or C++ code that uses CPython API extensively.
 The translated files are then compiled into binary Python modules (shared
 libraries from the operating system point of view: 
\family typewriter
.so
\family default
 files on Linux and 
\family typewriter
.dll
\family default
 files on Windows) that are treated transparently and indistinguishably
\begin_inset Foot
status open

\begin_layout Plain Layout
with some limitations like inability to programmatically retrieve executed
 source code
\end_layout

\end_inset

 by CPython.
 At the time of writing, Cython achieves virtually 100% compatibility with
 Python language, meaning that nearly every Python module can be compiled
 by Cython and then successfully used as a binary module in place of the
 original one.
 Cython is however not a replacement of CPython or any other Python implementati
on: the resulting binary modules depend on CPython environment and its shared
 library.
 In fact, the dependency on this specific Python implementation is one of
 the significant Cython limitations.
\begin_inset Foot
status open

\begin_layout Plain Layout
efforts to make Cython compatible with other implementations exist, though,
 e.g.
 PyPy support is approached using a 
\family typewriter
cpyext
\family default
 layer: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://docs.cython.org/src/userguide/pypy.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Static Typing
\end_layout

\begin_layout Standard
Compilation to machine code nullifies the interpreter overhead of traditional
 Python implementations, which was as high as 290% in the numerical integration
 example.
 This should be viewed as an extreme case with reports mentioning 30% performanc
e improvement (with no modification to the code) being more common for general
 code.
 The main strength nonetheless lies in the ability to statically type 
\emph on
some
\emph default
 variables, which avoids dynamic-typing overhead mandated by the Python
 language semantics; typing all variables involved in the accumulation loop
 of numerical integration example resulted in additional 
\begin_inset Formula $21\times$
\end_inset

 execution time reduction.
 This version had virtually the same performance as the one hand-written
 in C; this Cython's ability to come near to C code in terms of performance
 was shown also with a more complex algorithm.
\begin_inset CommandInset citation
LatexCommand cite
key "WilLanOdeAsm:09"

\end_inset

 To express typing information for given variables Cython extends the Python
 language with additional constructs:
\end_layout

\begin_layout Description

\family typewriter
cdef
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

i
\family default
 declares a variable of type 
\family typewriter
int
\end_layout

\begin_layout Description

\family typewriter
cdef
\begin_inset space ~
\end_inset

bint
\begin_inset space ~
\end_inset

func(double
\begin_inset space ~
\end_inset

x):
\family default
 defines a function with C calling semantics taking 
\family typewriter
double
\family default
 floating-point value and returning a boolean value encoded as integer (
\family typewriter
bint
\family default
)
\end_layout

\begin_layout Standard
If 
\family typewriter
cpdef
\family default
 was used instead of 
\family typewriter
cdef
\family default
 in the function definition above, Cython would generate a Python wrapper
 around func() so that it can be called from Python code (with usual overhead
 coming from Python function call semantics).
 Object-oriented paradigm is supported, class definitions can be annotated
 using again the 
\family typewriter
cdef
\family default
 modifier to form so-called 
\emph on
extension types
\emph default
, Cython-extended classes whose attributes and methods can be typed.
 Inheritance is supported, extension types can even by extended by Python
 code (not the other way around); Cython implements virtual function support
 in C to keep Python semantics.
 Extension types, which behave like built-in types such as 
\family typewriter
str
\family default
 to Python code, can in turn appear in further Cython typing constructs.
\end_layout

\begin_layout Subsubsection
Pure Python Mode
\end_layout

\begin_layout Standard
Adding typing annotations to code makes it incompatible with Python and
 associated development tools such as documentation extractors and static
 code analysis utilities.
 This is often undesirable.
 When using Cython, this can be avoided by placing the annotations outside
 of 
\family typewriter
.py
\family default
 module files.
 It supports so-called 
\emph on
pure Python
\emph default
 mode, where these would-be incompatible annotations are put into augmentation
 
\family typewriter
.pxd
\family default
 files.
 For example a 
\family typewriter
module.py
\family default
 file can be kept Python-compatible while still providing necessary typing
 information in a 
\family typewriter
module.pxd
\family default
 file.
 Another purpose of putting declarations into 
\family typewriter
.pxd
\family default
 files is to share them between multiple modules, in a direct analogy to
 
\family typewriter
.h
\family default
 header files in C.
 PyBayes uses pure Python mode to resolve the ambivalent requirements of
 supporting rapid prototyping 
\emph on
and
\emph default
 high performance.
\end_layout

\begin_layout Subsubsection
Interfacing C/C++ Code
\end_layout

\begin_layout Standard
Another property, and in fact the original rationale behind Cython, is its
 ability to interface external C and (since version 0.13) C++ code.
 Given its design (compilation into C/C++), Cython only needs to know signatures
 of accessed functions and data type layouts.
 Special syntax is provided to achieve this (Cython is not able to parse
 C header files, but a range of external projects provide such functionality
 and generate appropriate Cython declarations).
 Supported C++ features include polymorphism, templates, bundled interface
 to C++ standard library and automatic conversion of C++ exceptions to Python
 equivalents.
\end_layout

\begin_layout Subsubsection
Parallelism and GIL
\end_layout

\begin_layout Standard
In order to ease development or parallel algorithms that make use of multiple
 processor cores simultaneously, Cython brings support for parallelizing
 algorithms using OpenMP-like interface.
 Internally Cython implements this support by actually emitting OpenMP pragmas
 into generated C code.
 It additionally performs control flow analysis of the the variables involved
 in parallelized blocks to infer their thread-locality and whether they
 are used as reduction quantities.
 Hence it suffices to replace a 
\family typewriter
range
\family default
 loop by a 
\family typewriter
prange
\family default
 (which stands for parallel range) one in simple cases to achieve parallelism.
\end_layout

\begin_layout Standard
Parallelization feature would be of little use if Cython didn't solve the
 Global Interpreter Lock issue described above.
 The GIL is used by CPython to ensure consistency of otherwise non-thread-safe
 data structures, most prominently reference counters attached to each living
 Python object.
 Each variable assignment or function call adhering to Python semantics
 causes several updates of reference counts of involved objects.
 Cython can, if types are known and suitable, skip the Python semantics
 and perform desired operation (like a function call) in pure C without
 touching CPython data structures, thus removing the need to hold the GIL.
 Moreover it provides means to express that given code block can execute
 with the GIL released
\begin_inset Foot
status open

\begin_layout Plain Layout
ability to transiently hold the GIL inside a 
\begin_inset Quotes eld
\end_inset

nogil
\begin_inset Quotes erd
\end_inset

 block is also provided
\end_layout

\end_inset

 (which turns on compile-time checking whether this is possible) and means
 to label entire functions as not requiring the GIL to be held.
 It is then required that 
\family typewriter
prange
\family default
 appears only at places where the GIL is released (in fact, it can be instructed
 to release the GIL itself using a parameter), which in turn ensures that
 the nested block can execute in a truly parallel manner.
\end_layout

\begin_layout Subsubsection
Templates
\end_layout

\begin_layout Standard
Since its 0.16 version Cython allows programmers to avoid some sorts of code
 duplication by providing simple templating support.
 The feature called 
\emph on
fused types
\emph default
 is somehow restricted compared template support as known e.g.
 from the C++ language: all possible specializations of a fused type need
 to be known at compile time.
 The advantage is that this approach doesn't change build system semantics:
 functions using fused types are still generated in the same phase.
 Cython generates a typed code block for each possible combination (for
 public code; in case of publicly inaccessible parts, only actually used
 variants are generated), which can lead to combinatorial explosion unless
 used carefully.
 When interfacing C++ code, fused types can be combined with C++ templating
 system, so that for example wrappers around generic C++ container types
 can be written relatively easily.
\end_layout

\begin_layout Subsubsection
Typed Memoryviews
\end_layout

\begin_layout Standard
Cython 0.16 also introduced support for so-called 
\emph on
typed memoryviews
\emph default
, a special Cython-specific data type representing a view on a multidimensional
 numeric array.
 Unlike NumPy's 
\family typewriter
ndarray
\family default
, memoryviews encode their base data type (e.g.
 
\family typewriter
double
\family default
, 
\family typewriter
int
\family default
) and number of dimensions statically instead of dynamically, which along
 with implementation directly in Cython leads to significantly reduced overhead.
 Memoryviews provide very fast member access (indexing), transposing and
 slicing (creating a sub-view on part of the array, potentially of different
 dimension) while still keeping great flexibility, the format is for example
 able to express a view on a matrix of third components of a tensor, without
 copying data:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cdef double[:, :] third_components = tensor[:, :, 2]
\end_layout

\end_inset

another inherent advantage is that above operations can be done without
 holding the GIL, e.g.
 inside parallel blocks.
\end_layout

\begin_layout Standard
Memoryviews can be created out of any Python type that supports PEP
\begin_inset Foot
status open

\begin_layout Plain Layout
Python Enhancement Proposal
\end_layout

\end_inset

 3118
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.python.org/dev/peps/pep-3118
\end_layout

\end_inset


\end_layout

\end_inset

-style buffer interface --- without copying any data.
 This includes NumPy 
\family typewriter
ndarrays
\family default
, CPython 
\family typewriter
arrays
\family default
, newly introduced Cython arrays (provided just for the purpose of backing
 memoryviews).
 Automatic copy-free coercion to NumPy 
\family typewriter
ndarray
\family default
 is also implemented, which means that one can freely mix NumPy and memoryview
 methods.
 However, even without copying the data, each conversion incurs overhead
 caused by boilerplate Python code and requires holding the GIL.
\end_layout

\begin_layout Standard
It was shown by Jake Vanderplas in 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://jakevdp.github.io/blog/2012/08/08/memoryview-benchmarks/
\end_layout

\end_inset

 that optimized usage of Cython memoryviews led to to a an algorithm with
 virtually the same performance as the fastest solution using raw pointers
 on a nearest neighbor search example.
 This version was significantly faster than a different one that used legacy
 direct Cython support for NumPy 
\family typewriter
ndarray
\family default
 type.
 This support still exists, but it cannot do slicing as efficiently as memoryvie
ws, requires holding the GIL for all but element access and the syntax cannot
 be used for class attributes, among other limitations.
\end_layout

\begin_layout Standard
Memoryview feature of Cython is not yet perfect, though.
 The biggest obstacle is, in our opinion, the lack of support of algebraic
 operations of top of memoryviews.
 A mere attempt to add two matrices 
\family typewriter
a
\family default
 and 
\family typewriter
b
\family default

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cdef double[:, :] a, b
\end_layout

\begin_layout Plain Layout

result = a + b
\end_layout

\end_inset

results in a compile-time error as of Cython 0.20.1 with it complaining about
 invalid operands for the + operator.
 It is of course possible to exploit bidirectional coercion to NumPy types
 and use NumPy methods,
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cdef double[:, :] a, b
\end_layout

\begin_layout Plain Layout

np.add(a, b)
\end_layout

\begin_layout Plain Layout

np.asarray(a) + np.asarry(b)
\end_layout

\end_inset

but implied overhead and the need for the GIL negates virtually all advantages
 of using memoryviews in the first place.
 A project called 
\emph on
array expressions
\emph default
 had been worked on by memoryview support author, Mark Florisson, as part
 of his Master's thesis.
\begin_inset CommandInset citation
LatexCommand cite
key "Flo:12"

\end_inset

 Array expressions would add functionality to perform algebraic operations
 with memoryviews directly into Cython, through use of embedded 
\emph on
minivect
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/markflorisson88/minivect
\end_layout

\end_inset


\end_layout

\end_inset

 expression compiler.
 Unfortunately, a request to merge this support into Cython code-base was
 recalled by its author after discussions whether and how to include the
 minivect project.
\end_layout

\begin_layout Standard
Back in the days when memoryviews didn't exist and custom support for NumPy
 
\family typewriter
ndarray
\family default
 was state-of-the-art for computations in Cython, one could use Shane Legg's
 
\emph on
Tokyo
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.vetta.org/2009/09/tokyo-a-cython-blas-wrapper-for-fast-matrix-math/
\end_layout

\end_inset


\end_layout

\end_inset

 project as a Cython wrapper for a range of functions of system BLAS
\begin_inset Foot
status open

\begin_layout Plain Layout
Basic Linear Algebra Subprograms, a de facto standard API for computer linear
 algebra dating back to 1979
\end_layout

\end_inset

 implementation and a couple of system LAPACK
\begin_inset Foot
status open

\begin_layout Plain Layout
Linear Algebra PACKage, extension of BLAS with higher-level methods like
 equation solving or decompositions
\end_layout

\end_inset

 functions.
 While not even close to flexibility and elegance that would have been offered
 by array expressions (Tokyo inherited many legacy properties from BLAS
 and LAPACK, most prominently a fixed-function API which is painful to use),
 Tokyo did its job and offered remarkable overhead reduction.
 Still, BLAS and LAPACK compatibility problems that have been experienced
 when deploying Tokyo-based software along with its API motivated us to
 investigate different possibilities than porting Tokyo to memoryviews.
 A viable project, Eigen, was found and is presented in the next section.
\end_layout

\begin_layout Subsection
Eigen
\end_layout

\begin_layout Standard

\emph on
Eigen
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://eigen.tuxfamily.org/
\end_layout

\end_inset


\end_layout

\end_inset

 is a mature C++ template library for linear algebra written entirely in
 header files.
 Eigen makes extensive use of some of the lesser known features offered
 by the C++ language to achieve maximum performance, flexibility and elegance
 of use.
 Eigen employs templates to implement lazy evaluation,
\begin_inset Foot
status open

\begin_layout Plain Layout
deferring of the actual computations to the point where they are first really
 needed
\end_layout

\end_inset

 so that expressions like
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MatrixXd A, B, C, D;
\end_layout

\begin_layout Plain Layout

(...)
\end_layout

\begin_layout Plain Layout

A = 2*B - 3*(D - B));
\end_layout

\end_inset

expand only to one for loop (something that is impossible with a fixed-function
 API like the one of BLAS) and do not use any temporary variables because
 the computation happens as late as in the assignment operator (
\family typewriter
operator=()
\family default
), where memory of the matrix 
\family typewriter
A
\family default
 is already available.
 Eigen also performs explicit vectorization so that features of modern processor
s
\begin_inset Foot
status open

\begin_layout Plain Layout
like the SSE or AVX extensions
\end_layout

\end_inset

 are properly utilized for maximum performance.
\end_layout

\begin_layout Standard
Supported features include all common algebraic operations, linear problem
 solving, a variety of decompositions (Cholesky, LU, QR, SVD) and methods
 for solving eigenvalue problems.
 Large part of this functionality is also provided for sparse matrices,
 for which a custom efficient storage format is noted.
 Sparse matrices however present no advantage for our software solution
 and are thus not further studied.
\end_layout

\begin_layout Standard
The basic 
\family typewriter
Eigen::Matrix
\family default
 type has six template parameters (many of them implicit if unspecified)
 and allows programmer to specify individual dimensions either statically
 (at compile time) or dynamically (at runtime).
 Base scalar type and dimensionality (tensor order) are always specified
 statically, as in Cython memoryviews.
 Convenience subclasses are provided for row and column vectors (that simply
 fix row or column count to 1, respectively).
 To share code without the overhead of virtual C++ methods, Eigen exploits
 so-called 
\emph on
Curiously Recurring Template Pattern
\emph default
, where a base class takes the type of the derived class as its template
 parameter:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template<class Derived>
\end_layout

\begin_layout Plain Layout

class Base {
\end_layout

\begin_layout Plain Layout

    (...)
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Derived : public Base<Derived> {
\end_layout

\begin_layout Plain Layout

	(...)
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset

Thanks to this strangely-looking construct the 
\family typewriter
Base
\family default
 class can statically access methods and attributes of the 
\family typewriter
Derived
\family default
 class, which allows the C++ compiler to perform unprecedented range of
 optimizations.
 With this mechanism, element-wise complex conjugate operation on a real
 matrix becomes a true no-op 
\emph on
implicitly
\emph default
, without any help from application or library developer.
\end_layout

\begin_layout Standard
Thanks to this approach, Eigen's single-threaded performance surpasses all
 freely available BLAS/LAPACK implementations and matches state-of-the-art
 proprietary ones
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://eigen.tuxfamily.org/index.php?title=Benchmark
\end_layout

\end_inset


\end_layout

\end_inset

 like Intel MKL
\begin_inset Foot
status open

\begin_layout Plain Layout
Intel Math Kernel Library, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://software.intel.com/en-us/intel-mkl
\end_layout

\end_inset


\end_layout

\end_inset

 or ACML.
\begin_inset Foot
status open

\begin_layout Plain Layout
AMD Core Math Library, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.amd.com/tools-and-sdks/cpu-development/amd-core-math-library-acml
/
\end_layout

\end_inset


\end_layout

\end_inset

 Since Eigen 3.1.0 an optional support is provided for transparently using
 Intel MKL for functions and problem sizes that are known to be computed
 more efficiently using it.
\end_layout

\begin_layout Subsubsection
Mapping Type
\end_layout

\begin_layout Standard
For our potential use of implementing linear algebra on top of Cython memoryview
s, a subclass of the fundamental 
\family typewriter
Eigen::Matrix
\family default
 type comes into mind: the 
\family typewriter
Eigen::Map
\family default
 class enables one to use any piece of memory anywhere where 
\family typewriter
Eigen::Matrix
\family default
 is accepted if storage layout of the underlying numeric array is known.
 Eigen::Map has the following signature:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template<typename PlainObjectType, int MapOptions,
\end_layout

\begin_layout Plain Layout

         typename StrideType> class Map
\end_layout

\begin_layout Plain Layout

    : public MapBase<Map<PlainObjectType, MapOptions,
\end_layout

\begin_layout Plain Layout

                         StrideType> >,
\end_layout

\end_inset

where 
\family typewriter
PlainObjectType
\family default
 is the base scalar type, 
\family typewriter
MapOptions
\family default
 allow to specify additional flags like alignment constraints and 
\family typewriter
StrideType
\family default
 determines layout of the stored data.
 To illustrate: when a matrix element at row 
\begin_inset Formula $i$
\end_inset

 and column 
\begin_inset Formula $j$
\end_inset

 is to be accessed, 
\family typewriter
data
\family default
 is a pointer to first element of the array and 
\family typewriter
inner
\family default
, 
\family typewriter
outer
\family default
 being inner, respectively outer strides, following code holds:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PlainObjectType *data;
\end_layout

\begin_layout Plain Layout

(...)
\end_layout

\begin_layout Plain Layout

PlainObjectType element = data[outer*i + inner*j];
\end_layout

\end_inset

This example applies to row-major (C-style) matrices.
 Eigen again allows its users to specify inner and outer stride statically
 or dynamically (independently from each other).
\end_layout

\begin_layout Standard
Important special cases exist: when the inner stride is 1, the array is
 said to be C-contiguous (neighboring elements in a row are adjacent to
 each other in memory); when outer stride is 1, the array is said to be
 Fortran-contiguous (neighboring elements in a row are adjacent to each
 other in memory).
\begin_inset Foot
status open

\begin_layout Plain Layout
in fact, Eigen allows to express whether the storage order is row-major
 or column major, specifying the other storage variant has the same effect
 as swapping inner and outer stride
\end_layout

\end_inset

 Computations using Eigen are only efficient in case of C- or Fortran-contiguous
 arrays whose inner, respectively outer, stride is statically specified
 (to 1).
 This is an inherent limitation of the vectorization support in processors
 and cache locality principle; Eigen merely allows the general case of non-conti
guous arrays.
 We note that this maps perfectly to Cython memoryviews that can also be
 non-contiguous.
\end_layout

\begin_layout Subsection
PyBayes
\end_layout

\begin_layout Standard
PyBayes is, as the name suggests, a Python library for recursive Bayesian
 estimation written by the author of this text as part of the Bachelor thesis
\begin_inset CommandInset citation
LatexCommand cite
key "Laitl11"

\end_inset

 and actively maintained since.
 
\emph on
This section describes state of PyBayes 
\emph default
at the time when work on this thesis began
\emph on
.

\emph default
 It was modified and enhanced as part of this thesis, so this section is
 necessarily outdated.
 Changes that have been done to PyBayes are presented in later sections;
 past tense is used here for statements that no longer hold in their entirety
 as a result of these modifications.
\end_layout

\begin_layout Standard
PyBayes is developed publicly using git
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://git-scm.com/
\end_layout

\end_inset


\end_layout

\end_inset

 version control system on GitHub project hosting service at the address
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/strohel/PyBayes
\end_layout

\end_inset

.
 PyBayes is completely documented,
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://strohel.github.io/PyBayes-doc/
\end_layout

\end_inset


\end_layout

\end_inset

 and extensively unit-tested
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://travis-ci.org/strohel/PyBayes
\end_layout

\end_inset


\end_layout

\end_inset

 (with a total of 124 unit test at the time of writing this; the test-suite
 is auto-run on public Travis CI
\begin_inset Foot
status open

\begin_layout Plain Layout
Continuous Integration
\end_layout

\end_inset

 server upon every git push).
 PyBayes released under the GNU GPL
\begin_inset Foot
status open

\begin_layout Plain Layout
GNU General Public License, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.gnu.org/licenses/gpl-2.0.html
\end_layout

\end_inset


\end_layout

\end_inset

 v2+ strong copyleft open-source license and is compatible with both Python
 2 and Python 3.
\end_layout

\begin_layout Standard
As mentioned earlier, PyBayes can be used in two ways:
\end_layout

\begin_layout Enumerate
as an ordinary Python library with very simple installation and no dependencies
 apart from NumPy, or
\end_layout

\begin_layout Enumerate
compiled using Cython into optimized binary Python modules, which makes
 installation slightly more complicated, but brought 30% to 200% speed improveme
nts (depending on methods used and problem sizes).
\end_layout

\begin_layout Standard
This dual behavior is achieved without code duplication using the 
\emph on
pure Python
\emph default
 Cython mode, where implementation is put into valid and functional 
\family typewriter
.py
\family default
 files (Python modules) and extra declarations that allow Cython to do its
 optimizations are separated in corresponding 
\family typewriter
.pxd
\family default
 augmenting files.
 Such approach not only lowers the barrier of trying and getting started
 with PyBayes, but perhaps more importantly it preserves compatibility with
 tools that expect Python source code, in particular the 
\emph on
coverage
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://nedbatchelder.com/code/coverage/
\end_layout

\end_inset


\end_layout

\end_inset

 test coverage analysis tool and the 
\emph on
Sphinx
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://sphinx-doc.org/
\end_layout

\end_inset


\end_layout

\end_inset

 documentation generation system.
\end_layout

\begin_layout Standard
The Python build uses NumPy 
\family typewriter
ndarray
\family default
 of Python 
\family typewriter
float
\family default
s
\begin_inset Foot
status open

\begin_layout Plain Layout
Python 
\family typewriter
float
\family default
 type corresponds to C 
\family typewriter
double
\family default
 type
\end_layout

\end_inset

 is its base type, while the Cython build used the legacy direct Cython
 support for NumPy 
\family typewriter
ndarray
\family default
s as its default vector (and matrix) type --- development of PyBayes predates
 introduction of Cython memoryviews, so no viable alternative was available
 at the time.
 Efficient algebra with vectors and matrices in the Cython build was implemented
 using the 
\emph on
Tokyo
\emph default
 BLACS/LAPACK wrapper, which was bundled as a git submodule in the source
 code repository for convenience.
\end_layout

\begin_layout Standard
We continue by brief presentation of actual functionality that the PyBayes
 library offers for solving problems of recursive Bayesian estimation: the
 way how random variables are represented and why, the framework of probability
 density functions and finally the available Bayesian filtering methods.
 Next sections do not form a complete reference to PyBayes and omit some
 classes, they merely pick up classes and methods that were deemed important
 when considering its involvement and enhancement.
\end_layout

\begin_layout Subsubsection
Random Variable Meta-Representation
\end_layout

\begin_layout Standard
While PyBayes was designed to avoid symbolic computing where feasible, general
 probability density function products like
\begin_inset Formula 
\[
p(a,b|c)=p(a|b)p(b|c)
\]

\end_inset

had to be expressed.
 A concept of random variables and their components was designed to facilitate
 this.
 The two classes can be found in the 
\family typewriter
pybayes.pdfs
\family default

\begin_inset Foot
status open

\begin_layout Plain Layout
pdfs stands for probability density functions
\end_layout

\end_inset

 module because of their closeness to probability density functions.
\end_layout

\begin_layout Description

\family typewriter
RVComp
\family default
 class represents a component of a random variable, for example 
\begin_inset Formula $a$
\end_inset

 in the example above.
 It has one mandatory parameter, 
\family typewriter
dimension
\family default
 (integer), which denotes dimension of this component and an optional parameter
 
\family typewriter
name
\family default
 (string), which is only used for display purposes.
\end_layout

\begin_layout Description

\family typewriter
RV
\family default
 class represents a random variable, and is in fact just a sequence of 
\family typewriter
RVComp
\family default
s coupled with convenience attributes 
\family typewriter
name
\family default
 and 
\family typewriter
dimension
\family default
 that cumulate child components.
 It also provides a couple of helper methods:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
contains(component)
\family default
 returns true when component is part of this random variable.
\end_layout

\begin_layout Description

\family typewriter
contains_all(components),
\begin_inset space ~
\end_inset

contains_any(components)
\family default
 convenience extensions of 
\family typewriter
contains()
\family default
.
\end_layout

\begin_layout Description

\family typewriter
contained_in(components)
\family default
 method dual to 
\family typewriter
contains()
\family default
, return true if this random variable is entirely contained in 
\family typewriter
components
\family default
.
\end_layout

\begin_layout Description

\family typewriter
indexed_in(super_rv)
\family default
 returns index array that can be used to select all components in this random
 variable within 
\family typewriter
super_rv
\family default
, which must be its superset.
\end_layout

\end_deeper
\begin_layout Standard
Two 
\family typewriter
RVComp
\family default
s are considered equal in comparisons within 
\family typewriter
RV
\family default
 if and only if they reference the same instance.
 This is best shown on an example of interactive Python session:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

>>> rv = RV(RVComp(1, "a"))
\end_layout

\begin_layout Plain Layout

>>> ...
\end_layout

\begin_layout Plain Layout

>>> rv.contains(RVComp(1, "a"))
\end_layout

\begin_layout Plain Layout

False
\end_layout

\end_inset

Such semantics may seem unexpected for new users, but Python's behavior
 to reference, rather than copy, object in assignments makes this approach
 convenient.
 It also avoids problems of an alternative to compare random variable components
 by their names: possible unwanted collisions and slower comparisons.
\end_layout

\begin_layout Standard
Random variables are of no use on their own, they become useful when attached
 to probability density functions as shown in the next section.
\end_layout

\begin_layout Subsubsection
Probability Density Functions
\end_layout

\begin_layout Standard
Recursive Bayesian estimation is built on probability density functions,
 and so is PyBayes.
 Its framework of distributions forms large part of the library; it is implement
ed in the 
\family typewriter
pybayes.pdfs
\family default
 module.
 All distributions are assumed to be multivariate (even ones that are limited
 to one dimension, for symmetry) and represent their variables as vectors.
 The physical type employed for vectors depends on used build type of PyBayes
 and is denoted simply as 
\family typewriter
vector
\family default
.
 Following Python syntax, superclasses of presented classes are marked in
 parentheses.
\end_layout

\begin_layout Description

\family typewriter
CPdf
\family default
 is the fundamental prototype (abstract base class) for all possibly conditional
 probability density functions.
 Strict abstractness is in fact not abode as 
\family typewriter
CPdf
\family default
 contains 2 attributes:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
rv
\family default
 stores the random variable (
\family typewriter
RV
\family default
) that is associated with this distribution.
 Subclasses take 
\family typewriter
rv
\family default
 as an optional constructor argument; if it is not specified, conventions
 dictate that a random variable with one anonymous component of suitable
 size is created.
\end_layout

\begin_layout Description

\family typewriter
cond_rv
\family default
 is an analogy of 
\family typewriter
rv
\family default
 that stores the 
\emph on
conditioning
\emph default
 random variable.
 Similar rules for 
\family typewriter
cond_rv
\family default
 construction apply, with the difference that empty random variable (with
 no components) is created in case of unconditional probability density
 functions.
\end_layout

\begin_layout Standard
the main purpose of 
\family typewriter
CPdf
\family default
 is however to declare method prototypes that its subclasses implement:
\end_layout

\begin_layout Description

\family typewriter
shape()
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

int
\family default
 returns shape of the random variable (number of its dimensions); subclasses
 are encouraged to use the default implementation which simply returns 
\family typewriter
rv.dimension
\family default
.
\end_layout

\begin_layout Description

\family typewriter
cond_shape()
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

int
\family default
 is analogous to 
\family typewriter
shape()
\family default
, but applies to condition instead.
 Similarly, default implementation returns 
\family typewriter
cond_rv.dimension
\family default
.
\end_layout

\begin_layout Description

\family typewriter
mean(cond=None)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

vector
\family default
 returns mean value assuming the the conditioning variable takes value 
\family typewriter
cond
\family default
 (which is of type 
\family typewriter
vector
\family default
).
 In case of unconditional distributions, cond does not need to be specified,
 hence the default value of 
\family typewriter
None
\family default
.
\end_layout

\begin_layout Description

\family typewriter
variance(cond=None)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

vector
\family default
 computes variance (diagonal elements of covariance) of this distribution.
 
\family typewriter
cond
\family default
 is again ignored for unconditional probability density functions.
\end_layout

\begin_layout Description

\family typewriter
eval_log(x,
\begin_inset space ~
\end_inset

cond=None)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

double
\family default
 return logarithm of the (conditional) likelihood function in point x.
 Logarithm is used instead of untransformed value in order to achieve more
 accurate representation of near-zero values and to enforce non-negativeness.
 It also allows simpler formulas for distributions of the exponential family.
\end_layout

\begin_layout Description

\family typewriter
sample(cond=None)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

vector
\family default
 draws one sample from this probability density function (given condition
 
\family typewriter
cond
\family default
).
\end_layout

\begin_layout Description

\family typewriter
samples(n,
\begin_inset space ~
\end_inset

cond=None)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

matrix
\family default
 convenience helper to draw 
\begin_inset Formula $n$
\end_inset

 samples.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
Pdf(CPdf)
\family default
 is a thin subclass of 
\family typewriter
CPdf
\family default
 that forms a base class for unconditional probability density functions.
 It implements just 
\family typewriter
cond_shape()
\family default
 so that 0 is returned quickly and one convenience helper method for subclasses.
\end_layout

\begin_layout Description

\family typewriter
UniPdf(Pdf)
\family default
 is a straightforward implementation of the multivariate uniform density
 on interval 
\begin_inset Formula $\left[\mathbf{a},\mathbf{b}\right]$
\end_inset


\begin_inset Formula 
\[
f(\mathbf{x})=\Theta(\mathbf{x}-\mathbf{a})\Theta(\mathbf{b}-\mathbf{x})\prod_{i=1}^{n}\frac{1}{b_{i}-a_{i}}.
\]

\end_inset


\end_layout

\begin_layout Description

\family typewriter
AbstractGaussPdf(Pdf)
\family default
 is a container to store mean value 
\begin_inset Formula $\mu$
\end_inset

 and covariance matrix 
\begin_inset Formula $R$
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
GaussPdf(AbstractGaussPdf)
\family default
 represents multivariate normal distribution
\begin_inset Formula 
\[
f(\mathbf{x})\propto\exp\left(-\left(\mathbf{x}-\mu\right)R^{-1}\left(\mathbf{x}-\mu\right)\right).
\]

\end_inset


\end_layout

\begin_layout Description

\family typewriter
LogNormPdf(AbstractGaussPdf)
\family default
 models log-normal probability density function.
 I.e.
 the distribution of random variable 
\begin_inset Formula $Y$
\end_inset

 when
\begin_inset Formula 
\[
Y=\exp(X);\quad X\sim\mathcal{N}(\mu,R).
\]

\end_inset


\end_layout

\begin_layout Description

\family typewriter
AbstractEmpPdf(Pdf)
\family default
 is a base class for weighted empirical probability density functions.
 It has one attribute, 
\family typewriter
weights
\family default
 (
\family typewriter
vector
\family default
).
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
normalise_weights()
\family default
 multiplies weights by appropriate constant so that 
\begin_inset Formula $\sum\omega_{i}=1$
\end_inset

, where 
\begin_inset Formula $\omega_{i}$
\end_inset

 is weight of 
\begin_inset Formula $i^{\mathrm{th}}$
\end_inset

 particle.
\end_layout

\begin_layout Description

\family typewriter
get_resample_indices()
\family default
 calculates indexes of the 
\begin_inset Quotes eld
\end_inset

new
\begin_inset Quotes erd
\end_inset

 particles in the 
\begin_inset Quotes eld
\end_inset

old
\begin_inset Quotes erd
\end_inset

 particle array if resampling step of the particle filter is to be performed.
 Roughly speaking, each particle would be copied approximately 
\begin_inset Formula $n$
\end_inset

-times according to this index array, where 
\begin_inset Formula $n$
\end_inset

 is the ratio of particle weight 
\begin_inset Formula $\omega$
\end_inset

 and uniform weight 
\begin_inset Formula $\nicefrac{1}{N}$
\end_inset

 (
\begin_inset Formula $N$
\end_inset

 being particle count).
 This method does not change the distribution itself in any way it is merely
 a helper for subclasses.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
EmpPdf(AbstractEmpPdf)
\family default
 implements the standard weighted empirical probability density function
 as needed by the particle filter,
\begin_inset Formula 
\begin{align*}
f(\mathbf{x}) & =\sum_{i=1}^{n}\omega_{i}\delta(\mathbf{x}-\mathbf{x}^{(i)}),\\
\sum\omega_{i} & =1,
\end{align*}

\end_inset

where 
\begin_inset Formula $\mathbf{x}^{(i)}$
\end_inset

 is the value of 
\begin_inset Formula $i^{\mathrm{th}}$
\end_inset

 particle.
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
resample()
\family default
 performs actual resampling as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:SequentialMC"

\end_inset

: particles are re-indexed with the help of 
\family typewriter
get_resample_indices()
\family default
 and copied as needed, weights are reset to uniform (
\begin_inset Formula $\forall i\in N\quad\omega_{i}:=\frac{1}{N}$
\end_inset

).
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
ProdPdf(Pdf)
\family default
 represents a product of factor probability density functions, which need
 to be independent:
\begin_inset Formula 
\[
p(a,b,c)=p(a)p(b)p(c).
\]

\end_inset

This way one can represent for example a 2-dimensional random variable which
 is uniform along first axis and Gaussian along second axi
s
\lang english

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import pybayes as pb
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

prod = pb.ProdPdf([pb.UniPdf(...), pb.GaussPdf(...)]).
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
MLinGaussCPdf(CPdf)
\family default
 is a conditional normal distribution whose mean value 
\begin_inset Formula $\mu$
\end_inset

 depends on the condition through affine transformation:
\begin_inset Formula 
\[
f(x|c)\propto\exp\left(-\left(x-\mu\right)'R^{-1}\left(x-\mu\right)\right),
\]

\end_inset

where 
\begin_inset Formula $\mu=Ac+b$
\end_inset

 and 
\begin_inset Formula $c$
\end_inset

 is the value of conditioning variable.
 
\family typewriter
MLinGaussCPdf
\family default
 takes optional parameter 
\family typewriter
base_class
\family default
 (
\family typewriter
AbstractGaussPdf
\family default
 subclass) which can be used to specify alternate base probability density
 function to work on.
 This way one can create e.g.
 log-normal conditional density by passing 
\family typewriter
LogNormPdf
\family default
 as 
\family typewriter
base_class
\family default
.
\end_layout

\begin_layout Description

\family typewriter
LinGaussCPdf(CPdf)
\family default
 models similar, but univariate, conditional normal distribution whose mean
 value and variance depend on 2-dimensional conditioning variable so that
\begin_inset Formula 
\[
f(x|c_{1}c_{2})\propto\exp\left(-\frac{\left(x-\mu\right)^{2}}{2\sigma^{2}}\right),
\]

\end_inset

where 
\begin_inset Formula $\mu=ac_{1}+b$
\end_inset

 and 
\begin_inset Formula $\sigma^{2}=cc_{2}+d$
\end_inset

.
 
\family typewriter
LinGaussCPdf
\family default
 accepts 
\family typewriter
base_class
\family default
 optional argument (which again defaults to 
\family typewriter
GaussPdf
\family default
) in a manner similar to 
\family typewriter
MLinGaussCPdf
\family default
.
\end_layout

\begin_layout Description

\family typewriter
GaussCPdf(CPdf)
\family default
 is the most general one-dimensional normal probability density function
 available in PyBayes.
 It exploits Python's 
\begin_inset Quotes eld
\end_inset

function is a first-class citizen
\begin_inset Quotes erd
\end_inset

 principle and takes 2 functions 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 to perform general transformation of the condition so that
\begin_inset Formula 
\begin{align*}
\mu & =f(\mathbf{c}),\\
R & =g(\mathbf{c}),
\end{align*}

\end_inset

where 
\begin_inset Formula $\mathbf{c}$
\end_inset

 is the conditioning variable.
 
\family typewriter
GaussCPdf
\family default
 also takes 
\family typewriter
base_class
\family default
 optional argument as described above.
\end_layout

\begin_layout Description

\family typewriter
ProdCPdf(CPdf) 
\family default
represents general conditional product (application of the chain rule for
 probability density functions) of 2 or more (conditional) factor distributions.
 An example to describe
\begin_inset Formula 
\[
p(x_{1}x_{2}|y_{1}y_{2})=p(x_{1}|x_{2}y_{1})p(x_{2}|y_{2}y_{1})
\]

\end_inset

can look like this in the code:
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# prepare random variable components:
\end_layout

\begin_layout Plain Layout

x_1, x_2 = RVComp(1), RVComp(1, "name is optional")
\end_layout

\begin_layout Plain Layout

y_1, y_2 = RVComp(1), RVComp(1, "but recommended")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

p_1 = SomePdf(..., rv=[x_1], cond_rv=[x_2, y_1])
\end_layout

\begin_layout Plain Layout

p_2 = SomePdf(..., rv=[x_2], cond_rv=[y_2, y_1])
\end_layout

\begin_layout Plain Layout

p = ProdCPdf((p_2, p_1), rv=[x_1, x_2],
\end_layout

\begin_layout Plain Layout

             cond_rv=[y_1, y_2]).
\end_layout

\end_inset

ProdCPdf
\family default
 then constructs the data-flow automatically (with the help of utility methods
 of the 
\family typewriter
RV
\family default
 class) and raises an exception if this is impossible to do.
\end_layout

\begin_layout Subsubsection
Bayesian Filters
\end_layout

\begin_layout Standard
With frameworks modeling probability density functions and associated random
 variables in place, the road is paved to construct Bayesian filters.
 As it is common in PyBayes, there is abstract filter prototype and individual
 implementations.
 All filters are found in the 
\family typewriter
filters
\family default
 module of PyBayes.
\end_layout

\begin_layout Description

\family typewriter
Filter
\family default
 represents a Bayesian filter, i.e.
 any solution of the recursive Bayesian estimation problem as defined in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Recursive-Bayesian-Estimation"

\end_inset

 or its approximation.
 Filters usually take a description (of some form) of the transition and
 observation probability density functions as constructor parameters.
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
bayes(yt,
\begin_inset space ~
\end_inset

cond=None)
\family default
 performs the Bayesian update, i.e.
 the transition from 
\begin_inset Formula $t-1$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

, taking observation at time 
\begin_inset Formula $t$
\end_inset

, which is passed through the 
\family typewriter
yt
\family default
 (
\family typewriter
vector
\family default
) argument, into account.
 For flexibility, optional argument 
\family typewriter
cond
\family default
 (
\family typewriter
vector
\family default
) can be also supplied.
 Its meaning (as well as whether it is required or not) and depends on individua
l subclasses.
\end_layout

\begin_layout Description

\family typewriter
posterior()
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

Pdf
\family default
 returns posterior probability density function: 
\begin_inset Formula $p(x_{t}|y_{1:t})$
\end_inset

 however with 
\begin_inset Formula $y_{1:t}$
\end_inset

 already substituted by values passed to preceding 
\family typewriter
bayes()
\family default
 calls so that it takes unconditional form 
\begin_inset Formula $p(x_{t})$
\end_inset

.
 One might expect that posterior distribution would be returned right by
 the 
\family typewriter
bayes()
\family default
 method, but this is not done because constructing posterior may spend some
 additional resources and some callers may not need to know it after each
 
\family typewriter
bayes()
\family default
 call.
 It also makes calling code more explicit, which considered as more 
\begin_inset Quotes eld
\end_inset

Pythonic
\begin_inset Quotes erd
\end_inset

 way of designing software.
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.python.org/dev/peps/pep-0020/
\end_layout

\end_inset


\end_layout

\end_inset

 Subclasses are allowed to return a reference (for performance reasons)
 to their internal attribute, it is therefore forbidden to modify the returned
 object.
\end_layout

\begin_layout Description

\family typewriter
evidence_log(yt)
\begin_inset space ~
\end_inset

â†’
\begin_inset space ~
\end_inset

double
\family default
 returns logarithm of the 
\emph on
marginal likelihood
\emph default
 (sometimes also called 
\emph on
evidence
\emph default
)
\begin_inset CommandInset citation
LatexCommand cite
key "Smi:10"

\end_inset

 of the observation 
\begin_inset Formula $y_{t}$
\end_inset

, which is passed as 
\family typewriter
yt
\family default
 (
\family typewriter
vector
\family default
), given previous observations 
\begin_inset Formula $y_{1:t-1}$
\end_inset

, which are taken from preceding 
\family typewriter
bayes()
\family default
 calls (excluding the most recent one), i.e.
\begin_inset Formula 
\[
p(y_{t}|y_{1:t-1})=\int p(y_{t}|x_{t})p(x_{t}|y_{1:t-1})\:\mathrm{d}x_{t}.
\]

\end_inset

This quantity can be used as a measure of confidence in the filter.
 Logarithm is returned instead of plain value for symmetry with 
\family typewriter
CPdf.eval_log()
\family default
 method.
 As closed formula for this quantity may not be known, subclasses are not
 required to implement this method.
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
KalmanFilter(Filter)
\family default
 implements the Kalman filter
\begin_inset CommandInset citation
LatexCommand cite
key "Kalman:60"

\end_inset

 (formulated in language of recursive Bayesian estimation).
 To make PyBayes suitable also for decision-making applications, control
 vector can be optionally specified through the 
\family typewriter
cond
\family default
 argument of the 
\family typewriter
bayes()
\family default
 method (along with related matrix parameters in the constructor).
 
\family typewriter
GaussPdf
\family default
 is (naturally) used as a posterior distribution and evidence_log() is implement
ed.
\end_layout

\begin_layout Description

\family typewriter
ParticleFilter(Filter)
\family default
 implements the particle filter as presented in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Particle-Filter"

\end_inset

.
 Before it was enhanced as part of this thesis, 
\family typewriter
ParticleFilter
\family default
 did not allow specifying the 
\emph on
proposal
\emph default
 distribution, i.e.
 it implemented only the 
\emph on
bootstrap
\emph default
 variant of the particle filter which cannot take most recent observation
 into account when sampling new particles.
 It also did not support specifying custom empirical probability density
 function --- 
\family typewriter
EmpPdf
\family default
 was used unconditionally, because the implementation was tied to it.
 ParticleFilter constructor took number of particles 
\begin_inset Formula $N$
\end_inset

 (
\family typewriter
int
\family default
), initial probability density function 
\begin_inset Formula $p(x_{0})$
\end_inset

 (
\family typewriter
Pdf
\family default
) to sample starting particles from, transition density 
\begin_inset Formula $p(x_{t}|x_{t-1})$
\end_inset

 and observation density 
\begin_inset Formula $p(y_{t}|x_{t})$
\end_inset

 (both 
\family typewriter
CPdf
\family default
) as its arguments.
\end_layout

\begin_layout Section
Analysis Results
\end_layout

\begin_layout Chapter
Design and Implementation
\end_layout

\begin_layout Section
Ceygen
\end_layout

\begin_layout Section
Asim
\end_layout

\begin_layout Subsection
Dispersion Model Prototype
\end_layout

\begin_layout Subsection
Puff-based Dispersion Model
\end_layout

\begin_layout Subsection
Assimilation
\end_layout

\begin_layout Subsection
Interaction With PyBayes
\end_layout

\begin_layout Subsection
Documentation (?)
\end_layout

\begin_layout Chapter
Results
\begin_inset CommandInset label
LatexCommand label
name "chap:Results"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Conclusion}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Conclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{
\backslash
listfigurename}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage % so that table of contents mentions correct page
\end_layout

\begin_layout Plain Layout


\backslash
phantomsection % so that hyperref makes correct reference 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "/home/strohel/skola/prace/bibliography"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_body
\end_document
